---
description: FeatherPanel Backend - Helper Classes and Utility Functions
globs: backend/app/Helpers/*.php
alwaysApply: false
---

# Helper Classes and Utilities

## ApiResponse Helper

Standard API response formatting:

```php
use App\Helpers\ApiResponse;

// Success response
return ApiResponse::success($data, $message, $statusCode);

// Examples:
return ApiResponse::success(['user' => $user], 'User fetched successfully', 200);
return ApiResponse::success(['user_id' => $userId], 'User created successfully', 201);
return ApiResponse::success([], 'User deleted successfully', 200);

// Error response
return ApiResponse::error($message, $errorCode, $statusCode);

// Examples:
return ApiResponse::error('User not found', 'USER_NOT_FOUND', 404);
return ApiResponse::error('Invalid email address', 'INVALID_EMAIL', 400);
return ApiResponse::error('Permission denied', 'FORBIDDEN', 403);

// Error with additional data
return ApiResponse::error($message, $errorCode, $statusCode, $data);

// Exception response
return ApiResponse::exception($message, $exception, $trace);
```

### ApiResponse Methods

```php
// Success
ApiResponse::success(?array $data = null, string $message = 'OK', int $status = 200): Response

// Error
ApiResponse::error(string $error_message, ?string $error_code, int $status = 400, ?array $data = null): Response

// Exception
ApiResponse::exception(string $message, ?string $error, array $trace = []): Response

// Manual response
ApiResponse::sendManualResponse(array $data, int $status = 200): Response
```

### Response Structure

**Success:**

```json
{
  "success": true,
  "message": "User created successfully",
  "data": { "user_id": 123 },
  "error": false,
  "error_message": null,
  "error_code": null
}
```

**Error:**

```json
{
  "success": false,
  "message": "User not found",
  "data": null,
  "error": true,
  "error_message": "User not found",
  "error_code": "USER_NOT_FOUND",
  "errors": [
    {
      "code": "USER_NOT_FOUND",
      "detail": "User not found",
      "status": 404
    }
  ]
}
```

## UUIDUtils Helper

```php
use App\Helpers\UUIDUtils;

// Generate UUID v4
$uuid = UUIDUtils::generateV4();
// Example: "550e8400-e29b-41d4-a716-446655440000"

// Validate UUID format
$isValid = UUIDUtils::isValid($uuid);
// Returns: boolean

// Generate short UUID (8 characters)
$shortUuid = UUIDUtils::generateShort();
// Example: "a1b2c3d4"
```

## CloudFlare RealIP

```php
use App\CloudFlare\CloudFlareRealIP;

// Get real client IP address (considering CloudFlare headers)
$ipAddress = CloudFlareRealIP::getRealIP();

// Use in activity logging
Activity::createActivity([
    'user_uuid' => $user['uuid'],
    'name' => 'login',
    'context' => 'User logged in',
    'ip_address' => CloudFlareRealIP::getRealIP(),
]);
```

## XChaCha20 Encryption

```php
use App\Helpers\XChaCha20;

// Generate encryption key
$key = XChaCha20::generateStrongKey(true); // Returns base64 encoded key

// Encrypt data
$encrypted = XChaCha20::encrypt($plaintext, $key);

// Decrypt data
$plaintext = XChaCha20::decrypt($encrypted, $key);
```

## PermissionHelper

```php
use App\Helpers\PermissionHelper;

// Check if user has permission
$hasPermission = PermissionHelper::hasPermission($userRoleId, 'admin.users.view');

// Check multiple permissions (OR logic)
$hasAnyPermission = PermissionHelper::hasAnyPermission($userRoleId, [
    'admin.users.view',
    'admin.users.edit',
]);

// Check multiple permissions (AND logic)
$hasAllPermissions = PermissionHelper::hasAllPermissions($userRoleId, [
    'admin.users.view',
    'admin.users.edit',
]);
```

## Common Helper Patterns

### Validation Helpers

```php
// Email validation
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return ApiResponse::error('Invalid email address', 'INVALID_EMAIL', 400);
}

// UUID validation
if (!preg_match('/^[a-f0-9\-]{36}$/i', $uuid)) {
    return ApiResponse::error('Invalid UUID format', 'INVALID_UUID', 400);
}

// URL validation
if (!filter_var($url, FILTER_VALIDATE_URL)) {
    return ApiResponse::error('Invalid URL', 'INVALID_URL', 400);
}

// Numeric validation
if (!is_numeric($id) || (int)$id <= 0) {
    return ApiResponse::error('Invalid ID', 'INVALID_ID', 400);
}
```

### String Helpers

```php
// Trim and validate
$value = trim($data['field'] ?? '');
if ($value === '') {
    return ApiResponse::error('Field is required', 'FIELD_REQUIRED', 400);
}

// Length validation
if (strlen($username) < 3 || strlen($username) > 32) {
    return ApiResponse::error('Username must be 3-32 characters', 'INVALID_LENGTH', 400);
}

// String manipulation
$slug = strtolower(str_replace(' ', '-', $name));
$initials = strtoupper(substr($first_name, 0, 1) . substr($last_name, 0, 1));
```

### Array Helpers

```php
// Filter and map
$ids = array_map(fn($item) => $item['id'], $items);
$active = array_filter($items, fn($item) => $item['active']);

// Column extraction
$userIds = array_column($users, 'id');
$emailMap = array_column($users, 'email', 'id');

// Difference and intersection
$missing = array_diff($required, array_keys($data));
$common = array_intersect($allowed, array_keys($data));
```

## Best Practices

- Always use helpers for consistent behavior
- Never bypass ApiResponse for HTTP responses
- Use CloudFlareRealIP for IP logging
- Validate all inputs before processing
- Use proper error codes for error responses
- Log security-relevant actions
