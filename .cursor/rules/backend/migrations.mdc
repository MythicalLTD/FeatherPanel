---
description: FeatherPanel Migrations - Database Migration Standards & SQL Best Practices
globs: backend/storage/migrations/*
alwaysApply: false
---

# FeatherPanel Migrations - Database Migration Standards

## Project Context

This is the FeatherPanel Migrations layer - SQL files that define database schema changes. Migrations create and modify database tables, indexes, constraints, and seed initial data.

## Core Principles

### 1. File Naming Convention

#### Standard Format

`YYYY-MM-DD.HH.MM-descriptive-name.sql`

#### Examples

- ✅ `2025-07-23.12.56-add-users.sql`
- ✅ `2025-08-05.15.32-add-servers.sql`
- ✅ `2025-09-10.18.10-redirect-links.sql`
- ✅ `2025-08-05.15.33-add-allocation-server-link.sql`
- ❌ `add_users.sql` (missing timestamp)
- ❌ `2025-07-23-users.sql` (wrong format)
- ❌ `users.sql` (no timestamp, no description)

#### Naming Rules

- Always include full timestamp: `YYYY-MM-DD.HH.MM`
- Use lowercase with hyphens for description
- Be descriptive: indicate what the migration does
- Use prefixes: `add-`, `create-`, `drop-`, `alter-`, `fix-`
- Keep names concise but clear

### 2. Table Creation Standards

#### CREATE TABLE Syntax

Always use `CREATE TABLE IF NOT EXISTS`:

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_table_name` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    `description` TEXT,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Table Naming Convention

**ALWAYS** prefix tables with `featherpanel_`:

- ✅ `featherpanel_users`
- ✅ `featherpanel_servers`
- ✅ `featherpanel_realms`
- ✅ `featherpanel_spells`
- ✅ `featherpanel_server_schedules`
- ❌ `users` (missing prefix)
- ❌ `fp_users` (wrong prefix)

**Use plural form for table names:**

- ✅ `featherpanel_users` (not `user`)
- ✅ `featherpanel_servers` (not `server`)
- ✅ `featherpanel_realms` (not `realm`)
- ✅ `featherpanel_spells` (not `spell`)

### 3. Column Definitions

#### Primary Keys

Always use `id` as the primary key with AUTO_INCREMENT:

```sql
`id` INT NOT NULL AUTO_INCREMENT,
-- ... other columns
PRIMARY KEY (`id`)
```

For large tables, consider:

```sql
`id` INT(11) NOT NULL AUTO_INCREMENT,
```

#### UUIDs

Use `CHAR(36)` for UUIDs:

```sql
`uuid` CHAR(36) NOT NULL,
UNIQUE KEY `table_uuid_unique` (`uuid`)
```

For short UUIDs (8 characters):

```sql
`uuidShort` CHAR(8) NOT NULL,
UNIQUE KEY `table_uuidshort_unique` (`uuidShort`)
```

#### String Fields

```sql
-- Short strings
`name` VARCHAR(255) NOT NULL,
`email` VARCHAR(255) NOT NULL,
`status` VARCHAR(191) DEFAULT NULL,

-- Long text
`description` TEXT,
`content` TEXT NOT NULL,

-- Very long text
`config` LONGTEXT,
```

#### Numeric Fields

```sql
-- Integers
`count` INT NOT NULL DEFAULT 0,
`user_id` INT(11) NOT NULL,
`priority` INT(11) DEFAULT NULL,

-- Booleans (use TINYINT)
`is_active` TINYINT(1) NOT NULL DEFAULT 0,
`enabled` TINYINT(1) NOT NULL DEFAULT 1,

-- Small numbers
`attempts` TINYINT(3) UNSIGNED NOT NULL DEFAULT 0,
```

#### ENUM Fields

```sql
`status` ENUM('pending', 'active', 'inactive') NOT NULL DEFAULT 'pending',
`banned` ENUM('false', 'true') NOT NULL DEFAULT 'false',
`deleted` ENUM('false', 'true') NOT NULL DEFAULT 'false',
```

#### JSON Fields with Validation

```sql
`features` LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL
    CHECK (json_valid(`features`)),
`docker_images` LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL
    CHECK (json_valid(`docker_images`)),
`metadata` JSON DEFAULT NULL,
```

#### Timestamp Fields

```sql
-- Auto-managed timestamps
`created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
`updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

-- Manual timestamps
`installed_at` TIMESTAMP NULL DEFAULT NULL,
`deleted_at` TIMESTAMP NULL DEFAULT NULL,
`last_run_at` TIMESTAMP NULL DEFAULT NULL,

-- DateTime fields
`next_run_at` DATETIME DEFAULT NULL,
`scheduled_for` DATETIME NOT NULL,
```

### 4. Constraints & Relationships

#### Foreign Keys

Always define foreign keys with proper ON DELETE behavior:

```sql
-- CASCADE: Delete child when parent is deleted
CONSTRAINT `servers_owner_id_foreign`
    FOREIGN KEY (`owner_id`)
    REFERENCES `featherpanel_users` (`id`)
    ON DELETE CASCADE,

-- SET NULL: Set to NULL when parent is deleted
CONSTRAINT `servers_node_id_foreign`
    FOREIGN KEY (`node_id`)
    REFERENCES `featherpanel_nodes` (`id`)
    ON DELETE SET NULL,

-- RESTRICT: Prevent deletion if referenced (default)
CONSTRAINT `spells_realm_id_foreign`
    FOREIGN KEY (`realm_id`)
    REFERENCES `featherpanel_realms` (`id`)
```

#### ON DELETE Strategies

- `CASCADE` - Delete dependent records (use for owned relationships)
- `SET NULL` - Nullify reference (use when record can exist independently)
- `RESTRICT` - Prevent deletion (use for critical dependencies)
- `NO ACTION` - Similar to RESTRICT (database default)

#### Constraint Naming Convention

`{table}_{column}_foreign`

Examples:

- `servers_owner_id_foreign`
- `spells_realm_id_foreign`
- `tasks_schedule_id_foreign`

#### Unique Constraints

```sql
-- Single column unique
UNIQUE KEY `users_email_unique` (`email`),
UNIQUE KEY `users_username_unique` (`username`),
UNIQUE KEY `servers_uuid_unique` (`uuid`),

-- Multiple column unique (composite)
UNIQUE KEY `allocation_node_port_unique` (`node_id`, `port`),
```

### 5. Indexes

#### Creating Indexes

Add indexes for frequently queried columns:

```sql
-- Single column index
KEY `servers_node_id_foreign` (`node_id`),
KEY `servers_owner_id_foreign` (`owner_id`),
KEY `tasks_action_index` (`action`),

-- Composite index
KEY `tasks_schedule_id_sequence_id_index` (`schedule_id`, `sequence_id`),

-- Unique index (also serves as regular index)
UNIQUE KEY `servers_uuid_unique` (`uuid`),
```

#### Index Naming Convention

- Foreign key indexes: `{table}_{column}_foreign`
- Regular indexes: `{table}_{column}_index` or `{table}_{col1}_{col2}_index`
- Unique indexes: `{table}_{column}_unique`

#### When to Add Indexes

- ✅ Foreign key columns
- ✅ UUID columns (UNIQUE)
- ✅ Frequently searched columns (status, email, username)
- ✅ Columns used in ORDER BY
- ✅ Columns used in WHERE clauses frequently
- ✅ Composite indexes for common query combinations
- ❌ Small tables (< 1000 rows typically don't need many indexes)
- ❌ Columns rarely queried
- ❌ Over-indexing (impacts write performance)

### 6. Data Types & Defaults

#### Choosing Data Types

**VARCHAR vs TEXT:**

```sql
-- Use VARCHAR for limited-length fields with known max
`name` VARCHAR(255) NOT NULL,
`email` VARCHAR(255) NOT NULL,
`status` VARCHAR(191) DEFAULT NULL,

-- Use TEXT for unlimited or very long content
`description` TEXT,
`content` TEXT NOT NULL,
`script_install` TEXT DEFAULT NULL,
```

**INT vs TINYINT:**

```sql
-- Use INT for IDs and counters that can grow large
`id` INT NOT NULL AUTO_INCREMENT,
`user_id` INT(11) NOT NULL,

-- Use TINYINT for booleans and small numbers
`is_active` TINYINT(1) NOT NULL DEFAULT 0,
`priority` TINYINT(3) UNSIGNED NOT NULL DEFAULT 0,
```

**CHAR vs VARCHAR:**

```sql
-- Use CHAR for fixed-length fields
`uuid` CHAR(36) NOT NULL,
`uuidShort` CHAR(8) NOT NULL,

-- Use VARCHAR for variable-length fields
`username` VARCHAR(64) NOT NULL,
```

#### Default Values

```sql
-- Strings
`status` VARCHAR(191) DEFAULT NULL,
`avatar` VARCHAR(255) DEFAULT 'https://cdn.mythical.systems/featherpanel/logo.png',

-- Numbers
`memory` INT NOT NULL DEFAULT 0,
`attempts` TINYINT(3) UNSIGNED NOT NULL DEFAULT 0,

-- ENUMs
`banned` ENUM('false', 'true') NOT NULL DEFAULT 'false',

-- Timestamps
`created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
`updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
```

### 7. Engine & Charset

#### Standard Settings

**ALWAYS use these settings for new tables:**

```sql
ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
```

Or for unicode-heavy content:

```sql
ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
```

#### Why These Settings?

- `InnoDB` - Supports foreign keys, transactions, better concurrency
- `utf8mb4` - Full UTF-8 support (including emojis, special characters)
- `utf8mb4_general_ci` - Case-insensitive comparisons, faster
- `utf8mb4_unicode_ci` - Case-insensitive, more accurate for non-English

### 8. Terminology Standards

#### ALWAYS Use Correct Terminology

**In table names:**

- ✅ `featherpanel_realms` (NOT `featherpanel_nests`)
- ✅ `featherpanel_spells` (NOT `featherpanel_eggs`)

**In column names:**

- ✅ `realm_id` (NOT `nest_id`)
- ✅ `spell_id` (NOT `egg_id`)
- ✅ `realms_id` (some legacy tables use this, be consistent)

**In constraints:**

- ✅ `servers_realm_id_foreign`
- ✅ `servers_spell_id_foreign`
- ❌ `servers_nest_id_foreign`
- ❌ `servers_egg_id_foreign`

### 9. Migration Types

#### Table Creation Migration

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_entities` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `uuid` CHAR(36) NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `description` TEXT,
    `status` ENUM('active', 'inactive') NOT NULL DEFAULT 'active',
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    UNIQUE KEY `entities_uuid_unique` (`uuid`),
    KEY `entities_status_index` (`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Adding Columns (ALTER TABLE)

```sql
-- Add single column
ALTER TABLE `featherpanel_users`
ADD COLUMN `phone` VARCHAR(20) DEFAULT NULL;

-- Add multiple columns
ALTER TABLE `featherpanel_servers`
ADD COLUMN `last_error` TEXT DEFAULT NULL,
ADD COLUMN `banned` TINYINT(1) NOT NULL DEFAULT 0;

-- Add column with position
ALTER TABLE `featherpanel_users`
ADD COLUMN `middle_name` VARCHAR(64) DEFAULT NULL AFTER `first_name`;
```

#### Modifying Columns

```sql
-- Change column type
ALTER TABLE `featherpanel_users`
MODIFY COLUMN `role` INT NOT NULL DEFAULT 1;

-- Rename column
ALTER TABLE `featherpanel_users`
CHANGE COLUMN `old_name` `new_name` VARCHAR(255) NOT NULL;
```

#### Adding Foreign Keys

```sql
ALTER TABLE `featherpanel_allocations`
ADD CONSTRAINT `allocations_server_id_foreign`
FOREIGN KEY (`server_id`)
REFERENCES `featherpanel_servers` (`id`)
ON DELETE SET NULL;
```

#### Adding Indexes

```sql
-- Add single index
ALTER TABLE `featherpanel_servers`
ADD INDEX `servers_status_index` (`status`);

-- Add unique index
ALTER TABLE `featherpanel_users`
ADD UNIQUE INDEX `users_email_unique` (`email`);

-- Add composite index
ALTER TABLE `featherpanel_tasks`
ADD INDEX `tasks_schedule_sequence_index` (`schedule_id`, `sequence_id`);
```

#### Dropping Columns/Constraints

```sql
-- Drop column
ALTER TABLE `featherpanel_users`
DROP COLUMN `old_column`;

-- Drop foreign key
ALTER TABLE `featherpanel_servers`
DROP FOREIGN KEY `servers_old_foreign`;

-- Drop index
ALTER TABLE `featherpanel_users`
DROP INDEX `users_old_index`;

-- Drop table
DROP TABLE IF EXISTS `featherpanel_old_table`;
```

#### Data Seeding

```sql
-- Insert default data
INSERT INTO `featherpanel_roles`
    (`name`, `display_name`, `color`)
VALUES
    ('user', 'User', '#fbc02d'),
    ('support', 'Support', '#43a047'),
    ('moderator', 'Moderator', '#1976d2'),
    ('admin', 'Administrator', '#1a1a1a');

-- Insert if not exists
INSERT INTO `featherpanel_settings`
    (`key`, `value`)
VALUES ('app_name', 'FeatherPanel')
ON DUPLICATE KEY UPDATE `key`=`key`;
```

### 10. Complex Table Examples

#### Complete User Table

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `username` VARCHAR(64) NOT NULL,
    `first_name` VARCHAR(64) NOT NULL,
    `last_name` VARCHAR(64) NOT NULL,
    `email` VARCHAR(255) NOT NULL,
    `role_id` INT NOT NULL DEFAULT 1,
    `external_id` INT NULL DEFAULT NULL,
    `password` VARCHAR(255) NOT NULL,
    `remember_token` VARCHAR(255) NOT NULL,
    `avatar` VARCHAR(255) NOT NULL DEFAULT 'https://cdn.mythical.systems/featherpanel/logo.png',
    `uuid` CHAR(36) NOT NULL,
    `first_ip` VARCHAR(45) NOT NULL DEFAULT '127.0.0.1',
    `last_ip` VARCHAR(45) NOT NULL DEFAULT '127.0.0.1',
    `banned` ENUM('false', 'true') NOT NULL DEFAULT 'false',
    `two_fa_enabled` ENUM('false', 'true') NOT NULL DEFAULT 'false',
    `two_fa_key` VARCHAR(255) NULL DEFAULT NULL,
    `deleted` ENUM('false', 'true') NOT NULL DEFAULT 'false',
    `last_seen` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `first_seen` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    UNIQUE KEY `users_email_unique` (`email`),
    UNIQUE KEY `users_username_unique` (`username`),
    UNIQUE KEY `users_uuid_unique` (`uuid`),
    KEY `users_role_id_index` (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Table with Foreign Keys

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_servers` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `uuid` CHAR(36) NOT NULL,
    `uuidShort` CHAR(8) NOT NULL,
    `node_id` INT(11) NOT NULL,
    `name` VARCHAR(191) NOT NULL,
    `owner_id` INT(11) NOT NULL,
    `allocation_id` INT(11) NOT NULL,
    `realms_id` INT(11) NOT NULL,
    `spell_id` INT(11) NOT NULL,
    `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    UNIQUE KEY `servers_uuid_unique` (`uuid`),
    UNIQUE KEY `servers_uuidshort_unique` (`uuidShort`),
    UNIQUE KEY `servers_allocation_id_unique` (`allocation_id`),
    KEY `servers_node_id_foreign` (`node_id`),
    KEY `servers_owner_id_foreign` (`owner_id`),
    KEY `servers_realm_id_foreign` (`realms_id`),
    KEY `servers_spell_id_foreign` (`spell_id`),
    CONSTRAINT `servers_allocation_id_foreign`
        FOREIGN KEY (`allocation_id`)
        REFERENCES `featherpanel_allocations` (`id`),
    CONSTRAINT `servers_spell_id_foreign`
        FOREIGN KEY (`spell_id`)
        REFERENCES `featherpanel_spells` (`id`),
    CONSTRAINT `servers_realm_id_foreign`
        FOREIGN KEY (`realms_id`)
        REFERENCES `featherpanel_realms` (`id`),
    CONSTRAINT `servers_node_id_foreign`
        FOREIGN KEY (`node_id`)
        REFERENCES `featherpanel_nodes` (`id`),
    CONSTRAINT `servers_owner_id_foreign`
        FOREIGN KEY (`owner_id`)
        REFERENCES `featherpanel_users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Self-Referencing Foreign Keys

```sql
CREATE TABLE `featherpanel_spells` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `uuid` CHAR(36) NOT NULL,
    `realm_id` INT(11) NOT NULL,
    `config_from` INT(11) DEFAULT NULL,
    `copy_script_from` INT(11) DEFAULT NULL,
    -- ... other columns
    PRIMARY KEY (`id`),
    UNIQUE KEY `spells_uuid_unique` (`uuid`),
    KEY `spells_realm_id_foreign` (`realm_id`),
    KEY `spells_config_from_foreign` (`config_from`),
    KEY `spells_copy_script_from_foreign` (`copy_script_from`),
    CONSTRAINT `spells_config_from_foreign`
        FOREIGN KEY (`config_from`)
        REFERENCES `featherpanel_spells` (`id`)
        ON DELETE SET NULL,
    CONSTRAINT `spells_copy_script_from_foreign`
        FOREIGN KEY (`copy_script_from`)
        REFERENCES `featherpanel_spells` (`id`)
        ON DELETE SET NULL,
    CONSTRAINT `spells_realm_id_foreign`
        FOREIGN KEY (`realm_id`)
        REFERENCES `featherpanel_realms` (`id`)
        ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
```

### 11. Migration Best Practices

#### Safety First

```sql
-- Always use IF NOT EXISTS for CREATE TABLE
CREATE TABLE IF NOT EXISTS `featherpanel_table`;

-- Always use IF EXISTS for DROP TABLE
DROP TABLE IF EXISTS `featherpanel_old_table`;

-- Check before adding constraints
ALTER TABLE `featherpanel_table`
ADD CONSTRAINT IF NOT EXISTS `constraint_name`
FOREIGN KEY (`column`) REFERENCES `other_table` (`id`);
```

#### Order of Operations

1. Create parent tables first (no foreign keys)
2. Create dependent tables with foreign keys
3. Add indexes
4. Insert seed data
5. Alter existing tables (if modification)

**Example:**

```sql
-- Step 1: Create realms table (parent)
CREATE TABLE IF NOT EXISTS `featherpanel_realms` (...);

-- Step 2: Create spells table (references realms)
CREATE TABLE IF NOT EXISTS `featherpanel_spells` (
    -- columns
    CONSTRAINT `spells_realm_id_foreign`
        FOREIGN KEY (`realm_id`)
        REFERENCES `featherpanel_realms` (`id`)
);

-- Step 3: Create servers table (references spells and realms)
CREATE TABLE IF NOT EXISTS `featherpanel_servers` (
    -- columns
    CONSTRAINT `servers_realm_id_foreign` (...),
    CONSTRAINT `servers_spell_id_foreign` (...)
);
```

#### Column Ordering

Logical column order in CREATE TABLE:

1. Primary key (`id`)
2. UUIDs (`uuid`, `uuidShort`)
3. Foreign keys (`user_id`, `node_id`, `realm_id`, `spell_id`)
4. Core fields (`name`, `description`, `email`, etc.)
5. Configuration/content fields
6. Boolean flags (`is_active`, `banned`, `deleted`)
7. Timestamp fields (`created_at`, `updated_at`, `deleted_at`)

### 12. Common Patterns

#### Soft Delete Pattern

```sql
`deleted` ENUM('false', 'true') NOT NULL DEFAULT 'false',
`deleted_at` TIMESTAMP NULL DEFAULT NULL,

-- Or using boolean
`is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
`deleted_at` TIMESTAMP NULL DEFAULT NULL,
```

#### Audit Trail Pattern

```sql
`created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
`updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
`created_by` INT(11) DEFAULT NULL,
`updated_by` INT(11) DEFAULT NULL,

KEY `entity_created_by_foreign` (`created_by`),
KEY `entity_updated_by_foreign` (`updated_by`),
CONSTRAINT `entity_created_by_foreign`
    FOREIGN KEY (`created_by`)
    REFERENCES `featherpanel_users` (`id`)
    ON DELETE SET NULL
```

#### Status/State Pattern

```sql
`status` ENUM('pending', 'processing', 'completed', 'failed') NOT NULL DEFAULT 'pending',
`started_at` TIMESTAMP NULL DEFAULT NULL,
`completed_at` TIMESTAMP NULL DEFAULT NULL,

KEY `entity_status_index` (`status`)
```

#### Locking Pattern (for queues/cron)

```sql
`locked` ENUM('false', 'true') NOT NULL DEFAULT 'false',
`locked_at` TIMESTAMP NULL DEFAULT NULL,
`is_processing` TINYINT(1) NOT NULL DEFAULT 0,

KEY `entity_locked_index` (`locked`),
KEY `entity_is_processing_index` (`is_processing`)
```

### 13. Plugin Migrations

#### Plugin Table Naming

Plugin tables MUST be prefixed with `featherpanel_{pluginidentifier}_`:

```sql
-- For plugin with identifier "myplugin"
CREATE TABLE IF NOT EXISTS `featherpanel_myplugin_data` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Plugin Migration File Location

`backend/storage/addons/{plugin}/Migrations/YYYYMMDD_description.php`

### 14. Common Mistakes to Avoid

❌ **DON'T:**

- Forget `IF NOT EXISTS` on CREATE TABLE
- Forget `featherpanel_` prefix
- Use deprecated terms (eggs, nests)
- Forget to add indexes on foreign keys
- Forget ON DELETE behavior on foreign keys
- Use `utf8` instead of `utf8mb4`
- Use `MyISAM` engine (use `InnoDB`)
- Create orphan foreign keys (reference non-existent tables)
- Forget backticks around table/column names
- Use reserved SQL keywords as column names without backticks
- Create duplicate unique constraints

✅ **DO:**

- Always use `CREATE TABLE IF NOT EXISTS`
- Always use `featherpanel_` prefix
- Use correct terminology (realms, spells)
- Add indexes for all foreign keys
- Specify ON DELETE behavior explicitly
- Use `utf8mb4` charset
- Use `InnoDB` engine
- Create tables in dependency order
- Always use backticks for identifiers
- Check for naming conflicts
- Test migrations before deploying

### 15. Testing Migrations

Before committing a migration:

- [ ] Check SQL syntax
- [ ] Verify table name prefix
- [ ] Verify correct terminology used
- [ ] Check all foreign keys reference existing tables
- [ ] Verify indexes are created
- [ ] Check ON DELETE behaviors are appropriate
- [ ] Verify charset and engine settings
- [ ] Test migration in development environment
- [ ] Check for naming conflicts
- [ ] Verify column types and lengths are appropriate

### 16. SQL Formatting

#### Standard Formatting Style

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_table_name` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `column1` VARCHAR(255) NOT NULL,
    `column2` TEXT DEFAULT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    UNIQUE KEY `table_column1_unique` (`column1`),
    KEY `table_column2_index` (`column2`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

#### Indentation

- Use tabs for indentation
- Align column definitions
- Each constraint on its own line
- Group related items (columns, then indexes, then constraints)

## Quick Reference Checklist

When creating a new migration:

- [ ] Use correct filename format: `YYYY-MM-DD.HH.MM-description.sql`
- [ ] Use `CREATE TABLE IF NOT EXISTS`
- [ ] Prefix table with `featherpanel_`
- [ ] Use plural table names
- [ ] Add `id` as primary key with AUTO_INCREMENT
- [ ] Add UUIDs with CHAR(36) and UNIQUE constraint
- [ ] Use `realms` and `spells` (not eggs/nests)
- [ ] Add timestamps: `created_at`, `updated_at`
- [ ] Add indexes for foreign keys
- [ ] Add indexes for frequently queried columns
- [ ] Define foreign key constraints with ON DELETE behavior
- [ ] Use `ENGINE=InnoDB`
- [ ] Use `CHARSET=utf8mb4`
- [ ] Use `COLLATE=utf8mb4_general_ci` or `utf8mb4_unicode_ci`
- [ ] Add backticks around all identifiers
- [ ] Test migration before committing

## Complete Migration Examples

### Simple Table Creation

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_realms` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL,
    `description` TEXT,
    `logo` VARCHAR(255) DEFAULT 'https://cdn.mythical.systems/featherpanel/logo.png',
    `author` VARCHAR(255) DEFAULT 'support@mythical.systems',
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

### Complex Table with Foreign Keys

```sql
CREATE TABLE IF NOT EXISTS `featherpanel_server_schedules_tasks` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `schedule_id` INT(11) NOT NULL,
    `sequence_id` INT(11) NOT NULL,
    `action` VARCHAR(191) NOT NULL,
    `payload` TEXT NOT NULL,
    `time_offset` INT(11) NOT NULL DEFAULT 0,
    `is_queued` TINYINT(1) NOT NULL DEFAULT 0,
    `continue_on_failure` TINYINT(3) UNSIGNED NOT NULL DEFAULT 0,
    `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    KEY `tasks_schedule_id_sequence_id_index` (`schedule_id`, `sequence_id`),
    KEY `tasks_action_index` (`action`),
    KEY `tasks_is_queued_index` (`is_queued`),
    CONSTRAINT `tasks_schedule_id_foreign`
        FOREIGN KEY (`schedule_id`)
        REFERENCES `featherpanel_server_schedules` (`id`)
        ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
```

### ALTER TABLE Migration

```sql
-- Add new column
ALTER TABLE `featherpanel_servers`
ADD COLUMN `last_error` TEXT DEFAULT NULL;

-- Add index
ALTER TABLE `featherpanel_servers`
ADD INDEX `servers_status_index` (`status`);

-- Add foreign key
ALTER TABLE `featherpanel_allocations`
ADD CONSTRAINT `allocations_server_id_foreign`
FOREIGN KEY (`server_id`)
REFERENCES `featherpanel_servers` (`id`)
ON DELETE SET NULL;
```

### Data Seeding Migration

```sql
-- Insert default roles
INSERT INTO `featherpanel_roles` (`name`, `display_name`, `color`) VALUES
    ('user', 'User', '#fbc02d'),
    ('support', 'Support', '#43a047'),
    ('moderator', 'Moderator', '#1976d2'),
    ('admin', 'Administrator', '#1a1a1a');
```

### Drop Table Migration

```sql
-- Drop old table
DROP TABLE IF EXISTS `featherpanel_old_table`;
```
