---
globs: backend/app/Controllers/*,backend/app/routes/*,backend/app/Chat/*,backend/storage/migrations/*
alwaysApply: false
---

# FeatherPanel Routes - Coding Standards & Patterns

## Project Context

This is the FeatherPanel Routes layer - defining HTTP routes using Symfony routing components. Routes connect URLs to controller actions with middleware and permission checks.

## Core Principles

### 1. File Structure & Headers

Every route file MUST include:

- MIT License header with FeatherPanel copyright
- Return a closure that receives `RouteCollection`
- Use `App::getInstance(true)->registerAdminRoute()` for admin routes
- Use appropriate registration methods for other route types

**Standard route file header template:**

```php
<?php

/*
 * This file is part of FeatherPanel.
 *
 * MIT License
 *
 * Copyright (c) 2025 MythicalSystems
 * Copyright (c) 2025 Cassian Gherman (NaysKutzu)
 * Copyright (c) 2018 - 2021 Dane Everitt <dane@daneeveritt.com> and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

use App\App;
use App\Permissions;
use App\Helpers\ApiResponse;
use App\Controllers\Admin\EntityController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\RouteCollection;

return function (RouteCollection $routes): void {
    // Route definitions here
};
```

### 2. Route Organization

#### Directory Structure

Routes are organized by access level:

- `backend/app/routes/admin/` - Admin panel routes
- `backend/app/routes/user/` - User panel routes
- `backend/app/routes/system/` - System/public routes
- `backend/app/routes/wings/` - Wings daemon routes
- `backend/app/routes/web.php` - Root/general routes

#### File Naming Convention

- Use lowercase with hyphens: `users.php`, `redirect-links.php`
- One file per resource/entity
- Match controller name in lowercase: `UsersController` → `users.php`

### 3. Admin Route Registration

#### Standard Pattern

Use `App::getInstance(true)->registerAdminRoute()` for admin routes:

```php
App::getInstance(true)->registerAdminRoute(
    $routes,                          // RouteCollection
    'route-name',                     // Unique route name
    '/api/admin/path',                // URL path
    function (Request $request) {     // Controller closure
        return (new Controller())->method($request);
    },
    Permissions::PERMISSION_CONSTANT, // Required permission
    ['GET']                           // HTTP methods (optional, defaults to GET)
);
```

#### Method Signature

```php
registerAdminRoute(
    RouteCollection $routes,
    string $routeName,
    string $path,
    callable $controller,
    string $permission,
    array $methods = ['GET']
): void
```

### 4. RESTful Route Patterns

#### Standard CRUD Routes

For a resource "entities", define routes in this order:

```php
return function (RouteCollection $routes): void {
    // LIST/INDEX - GET /api/admin/entities
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities',
        '/api/admin/entities',
        function (Request $request) {
            return (new EntityController())->index($request);
        },
        Permissions::ADMIN_ENTITIES_VIEW,
    );

    // SHOW - GET /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-show',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->show($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_VIEW,
    );

    // CREATE - PUT /api/admin/entities
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-create',
        '/api/admin/entities',
        function (Request $request) {
            return (new EntityController())->create($request);
        },
        Permissions::ADMIN_ENTITIES_CREATE,
        ['PUT']
    );

    // UPDATE - PATCH /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-update',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->update($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_EDIT,
        ['PATCH']
    );

    // DELETE - DELETE /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-delete',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->delete($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_DELETE,
        ['DELETE']
    );
};
```

### 5. Route Naming Conventions

#### Pattern

`{access-level}-{resource}-{action}`

#### Examples

- `admin-users` - List users
- `admin-users-show` - Show single user
- `admin-users-create` - Create user
- `admin-users-update` - Update user
- `admin-users-delete` - Delete user
- `admin-users-owned-servers` - Custom action
- `user-server-files` - User panel server files
- `wings-server-details` - Wings daemon endpoint

#### Rules

- Use lowercase with hyphens
- Start with access level (admin, user, wings, system)
- Follow with resource name (singular or plural, be consistent per resource)
- End with action (optional for index routes)
- Keep names descriptive and unique

### 6. URL Path Conventions

#### Pattern

`/api/{access-level}/{resource}/{optional-id}/{optional-sub-resource}`

#### Examples

- `/api/admin/users` - List users
- `/api/admin/users/{uuid}` - Single user
- `/api/admin/users/{uuid}/servers` - User's servers
- `/api/user/servers/{uuid}/files` - Server files
- `/api/wings/servers/{uuid}` - Wings server endpoint

#### Rules

- Always start with `/api`
- Include access level after `/api` (admin, user, wings, system)
- Use plural resource names: `users`, `servers`, `spells`, `realms`
- Use singular for actions: `file`, `console`, `power`
- Use path parameters for IDs: `{id}`, `{uuid}`, `{slug}`
- Keep URLs RESTful and intuitive

### 7. Path Parameters

#### Extracting Parameters

Parameters are passed via `$args` array to the controller closure:

```php
function (Request $request, array $args) {
    $id = $args['id'] ?? null;
    $uuid = $args['uuid'] ?? null;
    $slug = $args['slug'] ?? null;
}
```

#### Validation Patterns

**Numeric ID:**

```php
$id = $args['id'] ?? null;
if (!$id || !is_numeric($id)) {
    return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
}
return (new Controller())->method($request, (int) $id);
```

**UUID:**

```php
$uuid = $args['uuid'] ?? null;
if (!$uuid || !is_string($uuid)) {
    return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
}
// Optional: Add UUID format validation
if (!preg_match('/^[a-f0-9\-]{36}$/i', $uuid)) {
    return ApiResponse::error('Invalid UUID format', 'INVALID_UUID_FORMAT', 400);
}
return (new Controller())->method($request, $uuid);
```

**String parameter:**

```php
$slug = $args['slug'] ?? null;
if (!$slug || !is_string($slug)) {
    return ApiResponse::error('Missing or invalid slug', 'INVALID_SLUG', 400);
}
return (new Controller())->method($request, $slug);
```

### 8. HTTP Method Specification

#### Default Method

If not specified, defaults to `GET`:

```php
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities',
    '/api/admin/entities',
    function (Request $request) {
        return (new EntityController())->index($request);
    },
    Permissions::ADMIN_ENTITIES_VIEW,
    // Defaults to ['GET']
);
```

#### Specifying Methods

Always specify methods for non-GET requests:

```php
// PUT for creation
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-create',
    '/api/admin/entities',
    function (Request $request) {
        return (new EntityController())->create($request);
    },
    Permissions::ADMIN_ENTITIES_CREATE,
    ['PUT']
);

// PATCH for updates
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-update',
    '/api/admin/entities/{id}',
    function (Request $request, array $args) {
        $id = $args['id'] ?? null;
        if (!$id || !is_numeric($id)) {
            return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
        }
        return (new EntityController())->update($request, (int) $id);
    },
    Permissions::ADMIN_ENTITIES_EDIT,
    ['PATCH']
);

// DELETE for deletion
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-delete',
    '/api/admin/entities/{id}',
    function (Request $request, array $args) {
        $id = $args['id'] ?? null;
        if (!$id || !is_numeric($id)) {
            return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
        }
        return (new EntityController())->delete($request, (int) $id);
    },
    Permissions::ADMIN_ENTITIES_DELETE,
    ['DELETE']
);

// Multiple methods (rare)
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-action',
    '/api/admin/entities/action',
    function (Request $request) {
        return (new EntityController())->action($request);
    },
    Permissions::ADMIN_ENTITIES_VIEW,
    ['GET', 'POST']
);
```

### 9. Permission Constants

#### Using Permissions

Always specify a permission constant:

```php
use App\Permissions;

App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-users',
    '/api/admin/users',
    function (Request $request) {
        return (new UsersController())->index($request);
    },
    Permissions::ADMIN_USERS_VIEW,  // Permission required
);
```

#### Permission Naming Pattern

`{ACCESS_LEVEL}_{RESOURCE}_{ACTION}`

#### Common Permissions

- `Permissions::ADMIN_USERS_VIEW`
- `Permissions::ADMIN_USERS_CREATE`
- `Permissions::ADMIN_USERS_EDIT`
- `Permissions::ADMIN_USERS_DELETE`
- `Permissions::ADMIN_SERVERS_VIEW`
- `Permissions::ADMIN_SERVERS_CREATE`
- `Permissions::ADMIN_SERVERS_EDIT`
- `Permissions::ADMIN_SERVERS_DELETE`
- `Permissions::ADMIN_REALMS_VIEW`
- `Permissions::ADMIN_REALMS_CREATE`
- `Permissions::ADMIN_REALMS_EDIT`
- `Permissions::ADMIN_REALMS_DELETE`
- `Permissions::ADMIN_SPELLS_VIEW`
- `Permissions::ADMIN_SPELLS_CREATE`
- `Permissions::ADMIN_SPELLS_EDIT`
- `Permissions::ADMIN_SPELLS_DELETE`

### 10. Controller Instantiation

#### Standard Pattern

Instantiate controller in closure and call method:

```php
function (Request $request) {
    return (new EntityController())->index($request);
}
```

#### With Path Parameters

Pass validated parameters to controller method:

```php
function (Request $request, array $args) {
    $id = $args['id'] ?? null;
    if (!$id || !is_numeric($id)) {
        return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
    }

    return (new EntityController())->show($request, (int) $id);
}
```

#### Multiple Parameters

```php
function (Request $request, array $args) {
    $userId = $args['userId'] ?? null;
    $serverId = $args['serverId'] ?? null;

    if (!$userId || !is_numeric($userId)) {
        return ApiResponse::error('Missing or invalid user ID', 'INVALID_USER_ID', 400);
    }
    if (!$serverId || !is_numeric($serverId)) {
        return ApiResponse::error('Missing or invalid server ID', 'INVALID_SERVER_ID', 400);
    }

    return (new Controller())->method($request, (int) $userId, (int) $serverId);
}
```

### 11. Resource-Specific Patterns

#### UUID-Based Resources (Users, Servers)

```php
// Show by UUID
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-users-show',
    '/api/admin/users/{uuid}',
    function (Request $request, array $args) {
        $uuid = $args['uuid'] ?? null;
        if (!$uuid || !is_string($uuid)) {
            return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
        }

        return (new UsersController())->show($request, $uuid);
    },
    Permissions::ADMIN_USERS_VIEW,
);

// Update by UUID
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-users-update',
    '/api/admin/users/{uuid}',
    function (Request $request, array $args) {
        $uuid = $args['uuid'] ?? null;
        if (!$uuid || !is_string($uuid)) {
            return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
        }

        return (new UsersController())->update($request, $uuid);
    },
    Permissions::ADMIN_USERS_EDIT,
    ['PATCH']
);
```

#### ID-Based Resources (Realms, Spells)

```php
// Show by ID
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-realms-show',
    '/api/admin/realms/{id}',
    function (Request $request, array $args) {
        $id = $args['id'] ?? null;
        if (!$id || !is_numeric($id)) {
            return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
        }

        return (new RealmsController())->show($request, (int) $id);
    },
    Permissions::ADMIN_REALMS_VIEW,
);
```

### 12. Nested Resource Routes

#### Pattern

Parent resource → Child resource

```php
// User's servers
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-users-owned-servers',
    '/api/admin/users/{uuid}/servers',
    function (Request $request, array $args) {
        $uuid = $args['uuid'] ?? null;
        if (!$uuid || !is_string($uuid)) {
            return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
        }

        return (new UsersController())->ownedServers($request, $uuid);
    },
    Permissions::ADMIN_USERS_VIEW,
    ['GET']
);

// Server's files
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-servers-files',
    '/api/admin/servers/{uuid}/files',
    function (Request $request, array $args) {
        $uuid = $args['uuid'] ?? null;
        if (!$uuid || !is_string($uuid)) {
            return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
        }

        return (new ServersController())->files($request, $uuid);
    },
    Permissions::ADMIN_SERVERS_VIEW,
    ['GET']
);
```

### 13. Custom Action Routes

#### Non-CRUD Actions

Use descriptive action names in URL:

```php
// Bulk delete
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-bulk-delete',
    '/api/admin/entities/bulk-delete',
    function (Request $request) {
        return (new EntityController())->bulkDelete($request);
    },
    Permissions::ADMIN_ENTITIES_DELETE,
    ['DELETE']
);

// Import
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-spells-import',
    '/api/admin/spells/import',
    function (Request $request) {
        return (new SpellsController())->import($request);
    },
    Permissions::ADMIN_SPELLS_CREATE,
    ['POST']
);

// Export
App::getInstance(true)->registerAdminRoute(
    $routes,
    'admin-entities-export',
    '/api/admin/entities/export',
    function (Request $request) {
        return (new EntityController())->export($request);
    },
    Permissions::ADMIN_ENTITIES_VIEW,
    ['GET']
);
```

### 14. Terminology Standards

**ALWAYS use the correct FeatherPanel terminology in routes:**

- ✅ `/api/admin/realms` (NOT "nests")
- ✅ `/api/admin/spells` (NOT "eggs")
- ✅ `admin-realms`, `admin-spells` route names

**Never use deprecated terms:**

- ❌ `/api/admin/eggs`, `/api/admin/nests`
- ❌ `admin-eggs`, `admin-nests` route names

### 15. Error Responses in Routes

Return appropriate error responses for invalid parameters:

```php
// Missing parameter
if (!$id) {
    return ApiResponse::error('Missing ID parameter', 'MISSING_ID', 400);
}

// Invalid type
if (!is_numeric($id)) {
    return ApiResponse::error('ID must be numeric', 'INVALID_ID_TYPE', 400);
}

// Invalid format
if (!preg_match('/^[a-f0-9\-]{36}$/i', $uuid)) {
    return ApiResponse::error('Invalid UUID format', 'INVALID_UUID_FORMAT', 400);
}

// Combined validation
if (!$uuid || !is_string($uuid)) {
    return ApiResponse::error('Missing or invalid UUID', 'INVALID_UUID', 400);
}
```

### 16. Import Organization

#### Standard Imports

```php
use App\App;
use App\Permissions;
use App\Helpers\ApiResponse;
use App\Controllers\Admin\EntityController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\RouteCollection;
```

#### Import Order

1. App core classes (`App`, `Permissions`)
2. Helpers (`ApiResponse`, etc.)
3. Controllers
4. Symfony components
5. Other dependencies

### 17. Best Practices

#### Route Definition

- Define routes in logical order: index, show, create, update, delete, then custom actions
- Group related routes together
- Use consistent naming patterns
- Always validate path parameters
- Specify HTTP methods explicitly for non-GET routes

#### Security

- Always specify a permission for admin routes
- Validate all path parameters before passing to controllers
- Use type checking and null checks
- Return appropriate error responses for invalid input

#### Code Organization

- One file per resource
- Keep route files focused and concise
- Don't put business logic in route closures
- Use descriptive route names and paths
- Comment complex or non-obvious routes

#### Performance

- Keep route closures lightweight
- Defer heavy processing to controllers
- Use appropriate parameter validation (not overly complex)

## Quick Reference Checklist

When creating routes for a new resource:

- [ ] Add proper file header with MIT license
- [ ] Import required classes
- [ ] Return closure accepting RouteCollection
- [ ] Define routes in standard order (index, show, create, update, delete)
- [ ] Use consistent naming: `admin-{resource}-{action}`
- [ ] Use RESTful URLs: `/api/admin/{resource}/{id?}`
- [ ] Validate all path parameters
- [ ] Specify HTTP methods for non-GET routes
- [ ] Use appropriate permission constants
- [ ] Instantiate controllers properly
- [ ] Cast parameters to correct types
- [ ] Return ApiResponse for errors
- [ ] Use correct terminology (realms, spells)
- [ ] Test all routes

## Complete Route File Template

```php
<?php

use App\App;
use App\Permissions;
use App\Helpers\ApiResponse;
use App\Controllers\Admin\EntityController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\RouteCollection;

return function (RouteCollection $routes): void {
    // LIST - GET /api/admin/entities
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities',
        '/api/admin/entities',
        function (Request $request) {
            return (new EntityController())->index($request);
        },
        Permissions::ADMIN_ENTITIES_VIEW,
    );

    // SHOW - GET /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-show',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->show($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_VIEW,
    );

    // CREATE - PUT /api/admin/entities
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-create',
        '/api/admin/entities',
        function (Request $request) {
            return (new EntityController())->create($request);
        },
        Permissions::ADMIN_ENTITIES_CREATE,
        ['PUT']
    );

    // UPDATE - PATCH /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-update',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->update($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_EDIT,
        ['PATCH']
    );

    // DELETE - DELETE /api/admin/entities/{id}
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-delete',
        '/api/admin/entities/{id}',
        function (Request $request, array $args) {
            $id = $args['id'] ?? null;
            if (!$id || !is_numeric($id)) {
                return ApiResponse::error('Missing or invalid ID', 'INVALID_ID', 400);
            }

            return (new EntityController())->delete($request, (int) $id);
        },
        Permissions::ADMIN_ENTITIES_DELETE,
        ['DELETE']
    );

    // CUSTOM ACTION - POST /api/admin/entities/custom
    App::getInstance(true)->registerAdminRoute(
        $routes,
        'admin-entities-custom',
        '/api/admin/entities/custom',
        function (Request $request) {
            return (new EntityController())->customAction($request);
        },
        Permissions::ADMIN_ENTITIES_VIEW,
        ['POST']
    );
};
```
