---
description: FeatherPanel Backend - Caching Strategies and Redis Usage
globs: backend/app/Cache/*.php, backend/app/FastChat/*.php
alwaysApply: false
---

# Caching and Redis

## Redis Connection

```php
use App\FastChat\Redis;

// Create Redis connection
$redis = new Redis();

// Test connection
if (!$redis->testConnection()) {
    // Fall back to database or disable feature
    define('REDIS_ENABLED', false);
} else {
    define('REDIS_ENABLED', true);
}

// Get Redis client
$client = $redis->getClient();
```

## Cache Patterns

### Simple Cache

```php
// Set cache
$redis->set('key', 'value', 3600); // TTL in seconds

// Get cache
$value = $redis->get('key');

// Delete cache
$redis->delete('key');

// Check if exists
if ($redis->exists('key')) {
    // Key exists
}
```

### Cache with Fallback

```php
$cacheKey = 'users:list:' . $page;
$ttl = 300; // 5 minutes

// Try to get from cache
$cachedData = $redis->get($cacheKey);

if ($cachedData !== null) {
    // Return cached data
    return json_decode($cachedData, true);
}

// Fetch from database
$users = User::searchUsers($page, $limit);

// Store in cache
$redis->set($cacheKey, json_encode($users), $ttl);

return $users;
```

### Invalidation Pattern

```php
// When creating/updating/deleting, invalidate cache
$redis->delete('users:list:*'); // Invalidate all user list caches

// Or delete specific keys
$redis->delete('user:' . $userId);
$redis->delete('users:list:1');
```

## Rate Limiting

```php
use RateLimit\Rate;
use RateLimit\RedisRateLimiter;

$redisExt = new \Redis();
$redisExt->connect($redisHost, $redisPort);

$rateLimiter = new RedisRateLimiter(
    Rate::perMinute(60),  // 60 requests per minute
    $redisExt,
    'rate_limiting'
);

try {
    $rateLimiter->limit($ipAddress);
} catch (LimitExceeded $e) {
    return ApiResponse::error('Rate limit exceeded', 'RATE_LIMIT_EXCEEDED', 429);
}
```

## Cache Keys Convention

Use hierarchical keys with colons:

```
{resource}:{operation}:{identifier}
```

Examples:

- `user:profile:uuid-123`
- `users:list:page-1`
- `server:status:uuid-456`
- `settings:app:name`
- `session:token-abc123`

## When to Cache

✅ **DO Cache:**

- Frequently accessed, rarely changing data
- Expensive database queries
- API responses from external services
- Session data
- Rate limiting data
- Configuration settings

❌ **DON'T Cache:**

- Highly dynamic data
- User-specific sensitive data (unless encrypted)
- Data that changes frequently
- Real-time information

## Cache TTL Guidelines

- **Short (60-300s):** Frequently changing data
- **Medium (300-1800s):** Moderately stable data
- **Long (1800-3600s):** Rarely changing data
- **Very Long (3600+s):** Configuration, settings

## Best Practices

- Always handle Redis connection failures
- Set appropriate TTL values
- Invalidate cache when data changes
- Use consistent key naming
- Don't cache sensitive data unencrypted
- Monitor cache hit rates
- Use cache for performance, not correctness
