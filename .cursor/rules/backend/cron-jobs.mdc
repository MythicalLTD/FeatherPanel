---
description: FeatherPanel Cron Jobs - Scheduled Task Development Standards & Patterns
globs:
  - "backend/storage/cron/**/*.php"
  - "backend/storage/cron/**/*.bash"
alwaysApply: false
---

# FeatherPanel Cron Jobs - Coding Standards & Patterns

## Project Context

This is the FeatherPanel Cron layer - scheduled tasks that run at regular intervals to perform background operations like sending emails, processing server schedules, and system maintenance.

## Core Principles

### 1. File Structure & Organization

#### Directory Structure

```
backend/storage/cron/
├── runner.php              # Main PHP cron runner
├── runner.bash             # Main bash cron runner
├── php/                    # PHP cron jobs
│   ├── MailSender.php
│   ├── ServerScheduleProcessor.php
│   └── UpdateEnv.php
└── bash/                   # Bash cron scripts
    └── permissions.bash
```

#### File Naming Conventions

- PHP cron jobs: PascalCase (e.g., `MailSender.php`, `ServerScheduleProcessor.php`)
- Bash scripts: lowercase with `.bash` extension (e.g., `permissions.bash`, `cleanup.bash`)
- One class per file for PHP jobs
- Descriptive names that indicate the job's purpose

### 2. PHP Cron Job Structure

#### Required Interface

All PHP cron jobs MUST implement the `TimeTask` interface:

```php
<?php

namespace App\Cron;

use App\Cli\Utils\MinecraftColorCodeSupport;
use App\Cron\Cron;
use App\Cron\TimeTask;
use App\Chat\TimedTask;

class YourCronJob implements TimeTask
{
    /**
     * Entry point for the cron job.
     */
    public function run()
    {
        $cron = new Cron('your-cron-job-name', '1M');
        try {
            $cron->runIfDue(function () {
                $this->performTask();
                TimedTask::markRun('your-cron-job-name', true, 'Cron job heartbeat');
            });
        } catch (\Exception $e) {
            $app = \App\App::getInstance(false, true);
            $app->getLogger()->error('Failed to run cron job: ' . $e->getMessage());
            TimedTask::markRun('your-cron-job-name', false, $e->getMessage());
        }
    }

    /**
     * Perform the actual task.
     */
    private function performTask()
    {
        // Implementation here
    }
}
```

#### Class Structure

```php
namespace App\Cron;

use App\Cli\Utils\MinecraftColorCodeSupport;
use App\Cron\Cron;
use App\Cron\TimeTask;
use App\Chat\TimedTask;

class CronJobName implements TimeTask
{
    /**
     * Entry point - REQUIRED by TimeTask interface
     */
    public function run() { }

    /**
     * Main task implementation - PRIVATE
     */
    private function performTask() { }

    /**
     * Helper methods - PRIVATE
     */
    private function helperMethod() { }
}
```

### 3. Cron Scheduling

#### Using the Cron Class

The `Cron` class handles scheduling logic:

```php
// Constructor: new Cron(string $name, string $schedule)
// Schedule formats:
// - '1M'  = Every minute
// - '5M'  = Every 5 minutes
// - '15M' = Every 15 minutes
// - '1H'  = Every hour
// - '24H' = Every 24 hours

$cron = new Cron('job-name', '1M');
$cron->runIfDue(function () {
    // Task code here
});
```

#### Common Schedules

- `'1M'` - Every minute (most frequent, use sparingly)
- `'5M'` - Every 5 minutes (email sending, light tasks)
- `'15M'` - Every 15 minutes (moderate tasks)
- `'1H'` - Every hour (heavy tasks, maintenance)
- `'24H'` - Every 24 hours (daily cleanup, reports)

### 4. Error Handling & Logging

#### Standard Error Handling Pattern

Always wrap cron execution in try-catch:

```php
public function run()
{
    $cron = new Cron('cron-job-name', '5M');
    try {
        $cron->runIfDue(function () {
            $this->performTask();

            // Mark successful execution
            TimedTask::markRun('cron-job-name', true, 'Job completed successfully');
        });
    } catch (\Exception $e) {
        // Log error
        $app = \App\App::getInstance(false, true);
        $app->getLogger()->error('Cron job failed: ' . $e->getMessage());

        // Mark failed execution
        TimedTask::markRun('cron-job-name', false, $e->getMessage());
    }
}
```

#### Using TimedTask for Heartbeats

Track cron job execution status:

```php
// Successful execution
TimedTask::markRun('cron-job-name', true, 'Description of what was done');

// Failed execution
TimedTask::markRun('cron-job-name', false, 'Error message or reason');

// Examples:
TimedTask::markRun('mail-sender', true, 'Sent 15 emails');
TimedTask::markRun('mail-sender', false, 'SMTP connection failed');
TimedTask::markRun('server-schedule-processor', true, 'Processed 5 schedules');
```

#### Logging Best Practices

```php
$app = \App\App::getInstance(false, true);

// Log errors
$app->getLogger()->error('Error message: ' . $e->getMessage());

// Log important events
$app->getLogger()->info('Task completed: ' . $details);

// Log warnings
$app->getLogger()->warning('Potential issue detected: ' . $warning);
```

### 5. Console Output

#### Using MinecraftColorCodeSupport

Output colored messages to console:

```php
use App\Cli\Utils\MinecraftColorCodeSupport;

// Green for success
MinecraftColorCodeSupport::sendOutputWithNewLine('&aTask completed successfully');

// Red for errors
MinecraftColorCodeSupport::sendOutputWithNewLine('&cFailed to process task: ' . $error);

// Yellow for warnings
MinecraftColorCodeSupport::sendOutputWithNewLine('&eWarning: Skipping task');

// Aqua for info
MinecraftColorCodeSupport::sendOutputWithNewLine('&bProcessing ' . $count . ' items');

// Gray for debug/details
MinecraftColorCodeSupport::sendOutputWithNewLine('&7Processing item: ' . $itemId);

// Purple for highlights
MinecraftColorCodeSupport::sendOutputWithNewLine('&dExecuting schedule: ' . $scheduleName);
```

#### Color Code Reference

- `&a` = Green (success)
- `&c` = Red (error)
- `&e` = Yellow (warning)
- `&b` = Aqua (info)
- `&7` = Gray (detail)
- `&d` = Light Purple (highlight)
- `&f` = White (normal)

### 6. Common Cron Job Patterns

#### Email/Queue Processing Pattern

```php
class MailSender implements TimeTask
{
    public function run()
    {
        $cron = new Cron('mail-sender', '1M');
        try {
            $cron->runIfDue(function () {
                $this->sendMails();
                TimedTask::markRun('mail-sender', true, 'Mail sender heartbeat');
            });
        } catch (\Exception $e) {
            $app = \App\App::getInstance(false, true);
            $app->getLogger()->error('Failed to send mail: ' . $e->getMessage());
            TimedTask::markRun('mail-sender', false, $e->getMessage());
        }
    }

    private function sendMails()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aProcessing mail queue...');

        // Get pending items
        $items = Queue::getPending();
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aFound ' . count($items) . ' items to process');

        foreach ($items as $item) {
            try {
                // Lock item to prevent duplicate processing
                Queue::lock($item['id']);

                // Process item
                $this->processItem($item);

                // Mark as processed
                Queue::markProcessed($item['id']);
                MinecraftColorCodeSupport::sendOutputWithNewLine('&aProcessed item: ' . $item['id']);
            } catch (\Exception $e) {
                // Mark as failed and unlock
                Queue::markFailed($item['id']);
                MinecraftColorCodeSupport::sendOutputWithNewLine('&cFailed to process item: ' . $e->getMessage());
            }
        }
    }
}
```

#### Server Management Pattern

```php
class ServerScheduleProcessor implements TimeTask
{
    public function run()
    {
        $cron = new Cron('server-schedule-processor', '1M');
        try {
            $cron->runIfDue(function () {
                $this->processSchedules();
                TimedTask::markRun('server-schedule-processor', true, 'Processed schedules heartbeat');
            });
        } catch (\Exception $e) {
            $app = App::getInstance(false, true);
            $app->getLogger()->error('Failed to process server schedules: ' . $e->getMessage());
            TimedTask::markRun('server-schedule-processor', false, $e->getMessage());
        }
    }

    private function processSchedules()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aProcessing server schedules...');

        $dueSchedules = ServerSchedule::getDueSchedules();
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aFound ' . count($dueSchedules) . ' due schedules');

        foreach ($dueSchedules as $schedule) {
            try {
                $this->processSchedule($schedule);
            } catch (\Exception $e) {
                MinecraftColorCodeSupport::sendOutputWithNewLine('&cFailed to process schedule ' . $schedule['id'] . ': ' . $e->getMessage());
                // Don't throw - continue processing other schedules
            }
        }
    }

    private function processSchedule(array $schedule)
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aProcessing schedule: ' . $schedule['name']);

        // Mark as processing to prevent concurrent execution
        ServerSchedule::markProcessing($schedule['id'], true);

        try {
            // Execute schedule
            $this->executeSchedule($schedule);

            // Calculate next run time
            $nextRun = ServerSchedule::calculateNextRunTime($schedule);

            // Update schedule
            ServerSchedule::update($schedule['id'], [
                'is_processing' => 0,
                'last_run_at' => date('Y-m-d H:i:s'),
                'next_run_at' => $nextRun,
            ]);

            MinecraftColorCodeSupport::sendOutputWithNewLine('&aSchedule processed successfully');
        } catch (\Exception $e) {
            // Mark as not processing on error
            ServerSchedule::markProcessing($schedule['id'], false);
            throw $e;
        }
    }
}
```

#### Maintenance/Cleanup Pattern

```php
class CleanupTask implements TimeTask
{
    public function run()
    {
        $cron = new Cron('cleanup-task', '24H');
        try {
            $cron->runIfDue(function () {
                $this->performCleanup();
                TimedTask::markRun('cleanup-task', true, 'Cleanup completed');
            });
        } catch (\Exception $e) {
            $app = \App\App::getInstance(false, true);
            $app->getLogger()->error('Cleanup failed: ' . $e->getMessage());
            TimedTask::markRun('cleanup-task', false, $e->getMessage());
        }
    }

    private function performCleanup()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aStarting cleanup tasks...');

        // Clean old logs
        $this->cleanOldLogs();

        // Clean temp files
        $this->cleanTempFiles();

        // Clean expired sessions
        $this->cleanExpiredSessions();

        MinecraftColorCodeSupport::sendOutputWithNewLine('&aCleanup completed');
    }

    private function cleanOldLogs()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aCleaning old logs...');

        $threshold = date('Y-m-d H:i:s', strtotime('-30 days'));
        $deleted = Log::deleteOlderThan($threshold);

        MinecraftColorCodeSupport::sendOutputWithNewLine('&aDeleted ' . $deleted . ' old log entries');
    }
}
```

### 7. Retry Logic

#### Implementing Retries

For operations that may fail transiently:

```php
private function sendMail(array $mail, array $recipient)
{
    $maxRetries = 3;
    $attempt = 0;
    $success = false;
    $lastError = '';

    while ($attempt < $maxRetries && !$success) {
        $attempt++;
        MinecraftColorCodeSupport::sendOutputWithNewLine(
            "&aAttempting to send mail (Attempt $attempt/$maxRetries)"
        );

        try {
            // Attempt operation
            $this->performMailSend($mail, $recipient);
            $success = true;

            MinecraftColorCodeSupport::sendOutputWithNewLine('&aMail sent successfully');
        } catch (\Exception $e) {
            $lastError = $e->getMessage();
            MinecraftColorCodeSupport::sendOutputWithNewLine(
                "&cFailed (attempt $attempt): " . $lastError
            );

            if ($attempt < $maxRetries) {
                sleep(2); // Wait before retrying
            }
        }
    }

    if (!$success) {
        throw new \Exception('Failed after ' . $maxRetries . ' attempts: ' . $lastError);
    }
}
```

### 8. Locking Mechanisms

#### Preventing Concurrent Execution

Use database flags to prevent duplicate processing:

```php
// Before processing
Queue::update($item['id'], ['locked' => 'true']);

try {
    // Process item
    $this->processItem($item);

    // Update status
    Queue::update($item['id'], [
        'locked' => 'false',
        'status' => 'processed'
    ]);
} catch (\Exception $e) {
    // Unlock on failure
    Queue::update($item['id'], [
        'locked' => 'false',
        'status' => 'failed'
    ]);
    throw $e;
}
```

#### Schedule-Level Locking

```php
// Mark schedule as processing
if (!ServerSchedule::updateSchedule($schedule['id'], ['is_processing' => 1])) {
    MinecraftColorCodeSupport::sendOutputWithNewLine('&cFailed to mark schedule as processing');
    return;
}

try {
    // Execute schedule
    $this->executeSchedule($schedule);

    // Mark as complete
    ServerSchedule::updateSchedule($schedule['id'], ['is_processing' => 0]);
} catch (\Exception $e) {
    // Unlock on error
    ServerSchedule::updateSchedule($schedule['id'], ['is_processing' => 0]);
    throw $e;
}
```

### 9. Activity Logging

#### Logging Cron Actions

Log important cron job actions for auditing:

```php
use App\Chat\Activity;
use App\Chat\ServerActivity;

// User-related activity
Activity::createActivity([
    'user_uuid' => $userUuid,
    'name' => 'cron_action',
    'context' => 'Cron job performed action: ' . $description,
    'ip_address' => '0.0.0.0', // System action
]);

// Server-related activity
ServerActivity::createActivity([
    'server_id' => $serverId,
    'node_id' => $nodeId,
    'event' => 'schedule_executed',
    'metadata' => json_encode([
        'schedule_id' => $scheduleId,
        'schedule_name' => $scheduleName,
        'executed_tasks' => $executedCount,
        'execution_time' => date('Y-m-d H:i:s'),
    ]),
]);
```

### 10. Configuration Access

#### Using Config

Access application configuration in cron jobs:

```php
use App\Config\ConfigFactory;
use App\Config\ConfigInterface;

$app = \App\App::getInstance(false, true);
$config = new ConfigFactory($app->getDatabase()->getPdo());

// Get settings
$mailEnabled = $config->getSetting(ConfigInterface::SMTP_ENABLED, 'false');
$smtpHost = $config->getSetting(ConfigInterface::SMTP_HOST, null);
$appName = $config->getSetting(ConfigInterface::APP_NAME, 'FeatherPanel');

// Check if feature is enabled
if ($mailEnabled === 'false') {
    MinecraftColorCodeSupport::sendOutputWithNewLine('&cMail is disabled, skipping');
    return;
}

// Validate configuration
if ($smtpHost === null) {
    MinecraftColorCodeSupport::sendOutputWithNewLine('&cSMTP host is not configured');
    return;
}
```

### 11. Bash Cron Scripts

#### Bash Script Structure

```bash
#!/bin/bash

# Brief description of what the script does

# Set working directory
cd "$(dirname "$0")"

# Configuration
LOG_FILE="/var/www/featherpanel/backend/storage/logs/cron.log"

# Log function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Main logic
log "Starting cron task: script-name"

# Perform task
if [[ condition ]]; then
    log "Task completed successfully"
else
    log "ERROR: Task failed"
    exit 1
fi

log "Finished cron task: script-name"
```

#### Example: Permissions Fix Script

```bash
#!/bin/bash

cd "$(dirname "$0")"

echo "Fixing file permissions..."
chown -R www-data:www-data /var/www/featherpanel/*
chmod -R 755 /var/www/featherpanel/*
echo "Permissions fixed successfully"
```

### 12. Plugin Cron Jobs

#### Plugin Cron Structure

Plugins can add their own cron jobs in `backend/storage/addons/{PluginName}/Cron/`:

```php
namespace App\Addons\PluginName\Cron;

use App\Cli\Utils\MinecraftColorCodeSupport;
use App\Cron\Cron;
use App\Cron\TimeTask;
use App\Chat\TimedTask;

class CustomCronJob implements TimeTask
{
    public function run()
    {
        $cron = new Cron('plugin-custom-job', '5M');
        try {
            $cron->runIfDue(function () {
                $this->performTask();
                TimedTask::markRun('plugin-custom-job', true, 'Plugin cron completed');
            });
        } catch (\Exception $e) {
            $app = \App\App::getInstance(false, true);
            $app->getLogger()->error('Plugin cron failed: ' . $e->getMessage());
            TimedTask::markRun('plugin-custom-job', false, $e->getMessage());
        }
    }

    private function performTask()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aExecuting plugin cron job');
        // Implementation
    }
}
```

### 13. Best Practices

#### Cron Job Design

- Keep cron jobs focused on a single responsibility
- Use appropriate scheduling intervals
- Don't run heavy operations every minute
- Implement proper error handling
- Log all important events
- Use locking to prevent concurrent execution
- Mark execution status with TimedTask

#### Error Handling

- Always use try-catch in `run()` method
- Log errors with full context
- Mark failed executions in TimedTask
- Don't let one failure stop processing of other items
- Implement retry logic for transient failures
- Clean up resources on failure (unlock, reset flags)

#### Performance

- Process items in batches when possible
- Use database indexes for queries
- Limit result sets appropriately
- Avoid loading unnecessary data
- Use efficient queries
- Monitor execution time
- Optimize heavy operations

#### Maintenance

- Log meaningful messages
- Use descriptive cron job names
- Comment complex logic
- Keep methods focused and small
- Test cron jobs in isolation
- Monitor cron job execution
- Set up alerts for failures

### 14. Testing Cron Jobs

#### Manual Testing

Test cron jobs manually before deployment:

```bash
# Run the PHP cron runner
cd /var/www/featherpanel/backend/storage/cron
php runner.php

# Run a specific cron job (requires modification to runner)
php -r "require 'runner.php'; (new App\Cron\YourCronJob())->run();"

# Run bash cron runner
bash runner.bash
```

#### Testing Checklist

- [ ] Cron job executes without errors
- [ ] Proper error handling for edge cases
- [ ] Console output is clear and informative
- [ ] Errors are logged appropriately
- [ ] TimedTask heartbeat is updated
- [ ] Database locks work correctly
- [ ] Retry logic functions as expected
- [ ] Performance is acceptable
- [ ] No resource leaks
- [ ] Cleanup happens on failure

### 15. Common Pitfalls to Avoid

❌ **DON'T:**

- Run heavy operations every minute
- Forget to mark execution status
- Let one failure stop processing
- Forget to unlock/cleanup on error
- Log sensitive data
- Use blocking operations without timeout
- Process unbounded result sets
- Forget error handling
- Mix business logic with cron logic
- Hardcode configuration values

✅ **DO:**

- Use appropriate intervals
- Always mark execution with TimedTask
- Handle each item independently
- Implement proper cleanup
- Sanitize logs
- Set timeouts for external calls
- Paginate or limit results
- Wrap everything in try-catch
- Delegate to service classes
- Use configuration system

## Quick Reference Checklist

When creating a new cron job:

- [ ] Implement `TimeTask` interface
- [ ] Use `namespace App\Cron;`
- [ ] Create `Cron` instance with appropriate interval
- [ ] Wrap execution in try-catch
- [ ] Mark execution status with `TimedTask::markRun()`
- [ ] Use MinecraftColorCodeSupport for console output
- [ ] Log errors to application logger
- [ ] Implement proper locking if needed
- [ ] Add retry logic for transient failures
- [ ] Clean up resources on failure
- [ ] Use Chat models for database operations
- [ ] Log important actions
- [ ] Test manually before deployment

## Complete Cron Job Template

```php
<?php

namespace App\Cron;

use App\Cli\Utils\MinecraftColorCodeSupport;
use App\Cron\Cron;
use App\Cron\TimeTask;
use App\Chat\TimedTask;

/**
 * YourCronJob - Brief description of what this cron job does
 *
 * Schedule: Runs every X minutes
 * Purpose: Describe the purpose and what it accomplishes
 */
class YourCronJob implements TimeTask
{
    /**
     * Entry point for the cron job.
     */
    public function run()
    {
        $cron = new Cron('your-cron-job', '5M');
        try {
            $cron->runIfDue(function () {
                $this->performTask();
                TimedTask::markRun('your-cron-job', true, 'Task completed successfully');
            });
        } catch (\Exception $e) {
            $app = \App\App::getInstance(false, true);
            $app->getLogger()->error('Cron job failed: ' . $e->getMessage());
            TimedTask::markRun('your-cron-job', false, $e->getMessage());
        }
    }

    /**
     * Perform the main task.
     */
    private function performTask()
    {
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aStarting task...');

        // Get items to process
        $items = Model::getPendingItems();
        MinecraftColorCodeSupport::sendOutputWithNewLine('&aFound ' . count($items) . ' items to process');

        foreach ($items as $item) {
            try {
                $this->processItem($item);
                MinecraftColorCodeSupport::sendOutputWithNewLine('&aProcessed item: ' . $item['id']);
            } catch (\Exception $e) {
                MinecraftColorCodeSupport::sendOutputWithNewLine('&cFailed to process item: ' . $e->getMessage());
                // Continue processing other items
            }
        }

        MinecraftColorCodeSupport::sendOutputWithNewLine('&aTask completed');
    }

    /**
     * Process a single item.
     */
    private function processItem(array $item)
    {
        // Lock item
        Model::lock($item['id']);

        try {
            // Process logic here

            // Mark as processed
            Model::markProcessed($item['id']);
        } catch (\Exception $e) {
            // Unlock and mark as failed
            Model::markFailed($item['id']);
            throw $e;
        }
    }
}
```
