---
globs: backend/app/Cli/Commands/*,backend/app/Cli/*
alwaysApply: false
---

# FeatherPanel CLI Commands - Coding Standards & Patterns

## Project Context

This is the FeatherPanel CLI layer - a PHP-based command-line interface for managing the FeatherPanel application. Commands provide administrative functionality for users, servers, migrations, and system configuration.

## Core Principles

### 1. File Structure & Headers

Every CLI file MUST include:

- MIT License header with FeatherPanel copyright
- Proper namespace: `App\Cli` for core files, `App\Cli\Commands` for commands
- PHPDoc comments for classes and public methods
- Implementation of `CommandBuilder` interface for all commands

**Standard file header template:**

```php
<?php

/*
 * This file is part of FeatherPanel.
 *
 * MIT License
 *
 * Copyright (c) 2025 MythicalSystems
 * Copyright (c) 2025 Cassian Gherman (NaysKutzu)
 * Copyright (c) 2018 - 2021 Dane Everitt <dane@daneeveritt.com> and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

namespace App\Cli\Commands;
```

### 2. Command Architecture

#### CommandBuilder Interface

All commands MUST implement the `CommandBuilder` interface:

```php
use App\Cli\App;
use App\Cli\CommandBuilder;

class YourCommand extends App implements CommandBuilder
{
    /**
     * Execute the command.
     *
     * @param array $args the arguments passed to the command
     */
    public static function execute(array $args): void
    {
        // Command implementation
    }

    /**
     * Get the description of the command.
     *
     * @return string The command description
     */
    public static function getDescription(): string
    {
        return 'Brief description of what the command does';
    }

    /**
     * Get the subcommands of the command.
     *
     * @return array Associative array of subcommand => description
     */
    public static function getSubCommands(): array
    {
        return [
            'subcommand1' => 'Description of subcommand1 (usage: commandname subcommand1 <args>)',
            'subcommand2' => 'Description of subcommand2 (usage: commandname subcommand2 <args>)',
        ];
    }
}
```

#### Command Class Structure

```php
class CommandName extends App implements CommandBuilder
{
    // Required interface methods
    public static function execute(array $args): void { }
    public static function getDescription(): string { }
    public static function getSubCommands(): array { }

    // Private helper methods for sub-commands
    private static function subCommand1(App $app, array $args): void { }
    private static function subCommand2(App $app, array $args): void { }

    // Private utility methods
    private static function helperMethod(string $param): mixed { }
}
```

### 3. Command Registration & Discovery

#### File Naming Convention

- Command files MUST be named with PascalCase: `Users.php`, `Setup.php`, `Migrate.php`
- Commands are auto-discovered based on filename
- The command is invoked using lowercase: `php fuse users`, `php fuse setup`
- Class name MUST match filename exactly

#### Command Loading

Commands are automatically loaded by the App class:

```php
// User runs: php fuse users list
// App looks for: backend/app/Cli/Commands/Users.php
// App instantiates: App\Cli\Commands\Users
```

### 4. Sub-Command Pattern

#### Implementing Sub-Commands

Use a switch statement in `execute()` to route to sub-commands:

```php
public static function execute(array $args): void
{
    $app = App::getInstance();

    // Check for .env file if database is needed
    if (!file_exists(__DIR__ . '/../../../storage/config/.env')) {
        \App\App::getInstance(true)->getLogger()->warning('Executed a command without a .env file');
        $app->send('&cThe .env file does not exist. Please create one before running this command');
        exit;
    }

    // Route to sub-commands
    if (isset($args[1])) {
        $subCommand = $args[1];
        switch ($subCommand) {
            case 'list':
                self::listItems($app, $args);
                break;
            case 'show':
                self::showItem($app, $args[2] ?? null);
                break;
            case 'create':
                self::createItem($app, $args);
                break;
            case 'update':
                self::updateItem($app, $args);
                break;
            case 'delete':
                self::deleteItem($app, $args[2] ?? null);
                break;
            default:
                $app->send('&cInvalid subcommand. Use: list, show, create, update, delete');
                break;
        }
    } else {
        $app->send('&cPlease specify a subcommand: list, show, create, update, delete');
    }

    exit;
}
```

#### Sub-Command Method Signature

Private helper methods should accept App instance and args:

```php
/**
 * List all items with pagination.
 *
 * @param App $app The CLI app instance
 * @param array $args Command arguments
 */
private static function listItems(App $app, array $args): void
{
    $page = (int) ($args[2] ?? 1);
    $limit = (int) ($args[3] ?? 10);

    // Validate pagination
    if ($page < 1) {
        $page = 1;
    }
    if ($limit < 1) {
        $limit = 10;
    }

    // Implementation
}
```

### 5. Output & Formatting

#### Using Color Codes

FeatherPanel CLI supports Minecraft-style color codes:

```php
// Color codes:
// &0 = Black        &8 = Dark Gray
// &1 = Dark Blue    &9 = Blue
// &2 = Dark Green   &a = Green
// &3 = Dark Aqua    &b = Aqua
// &4 = Dark Red     &c = Red
// &5 = Dark Purple  &d = Light Purple
// &6 = Gold         &e = Yellow
// &7 = Gray         &f = White

// Format codes:
// &l = Bold
// &m = Strikethrough
// &n = Underline
// &r = Reset

// Usage examples:
$app->send('&aSuccess message');              // Green
$app->send('&cError message');                // Red
$app->send('&eWarning message');              // Yellow
$app->send('&bInfo message');                 // Aqua
$app->send('&7Gray text &8&l| &7Message');   // Mixed colors
```

#### Standard Output Patterns

```php
// Success messages
$app->send('&aOperation completed successfully!');
$app->send('&eField: &fValue');

// Error messages
$app->send('&cError: Something went wrong');
$app->send('&cInvalid input provided');

// Info/prompts
$app->send('&7Processing...');
$app->send('&bFetching data from database...');

// Tables with borders
$app->send('&7' . str_repeat('-', 100));
$app->send(sprintf('&e%-10s %-30s %-20s', 'Column1', 'Column2', 'Column3'));
$app->send('&7' . str_repeat('-', 100));
```

#### Formatted Tables

Use `sprintf()` for aligned columns:

```php
// Header
$app->send('&7' . str_repeat('-', 100));
$app->send(sprintf('&e%-5s %-20s %-36s %-30s', 'ID', 'Username', 'UUID', 'Email'));
$app->send('&7' . str_repeat('-', 100));

// Rows
foreach ($items as $item) {
    $app->send(sprintf(
        '%-5s %-20s %-36s %-30s',
        $item['id'],
        substr($item['username'], 0, 20),
        $item['uuid'],
        substr($item['email'], 0, 30)
    ));
}

// Footer
$app->send('&7' . str_repeat('-', 100));
```

#### Pagination Output

```php
$total = Model::getCount($search);
$totalPages = ceil($total / $limit);

$app->send("&aResults (Page $page of $totalPages, Total: $total):");
```

### 6. Input Validation

#### Argument Validation

Always validate arguments before processing:

```php
// Check for required arguments
if (count($args) < 3) {
    $app->send('&cUsage: command subcommand <required_arg> [optional_arg]');
    return;
}

// Validate specific arguments
if (!$identifier) {
    $app->send('&cPlease provide an identifier');
    return;
}

// Validate format (email, UUID, etc.)
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $app->send('&cInvalid email address');
    return;
}

// Validate length
if (strlen($username) < 3 || strlen($username) > 32) {
    $app->send('&cUsername must be between 3 and 32 characters');
    return;
}
```

#### Parameter Extraction with Defaults

```php
// Extract with null coalescing
$identifier = $args[2] ?? null;
$page = (int) ($args[2] ?? 1);
$limit = (int) ($args[3] ?? 10);

// Extract with validation
$field = $args[3] ?? '';
$value = $args[4] ?? '';

if (empty($field) || empty($value)) {
    $app->send('&cMissing required parameters');
    return;
}
```

### 7. Database Integration

#### Using Chat Models

Commands should use Chat models for database operations:

```php
use App\Chat\User;
use App\Chat\Server;
use App\Chat\Role;

// Fetching data
$user = User::getUserByUuid($uuid);
$users = User::searchUsers($page, $limit, $search);
$total = User::getCount($search);

// Creating records
$userId = User::createUser($data);
if ($userId) {
    $app->send('&aRecord created successfully! ID: ' . $userId);
} else {
    $app->send('&cFailed to create record');
}

// Updating records
$updated = User::updateUser($uuid, $updateData);
if ($updated) {
    $app->send('&aRecord updated successfully!');
} else {
    $app->send('&cFailed to update record');
}

// Deleting records
$deleted = User::hardDeleteUser($id);
if ($deleted) {
    $app->send('&aRecord deleted successfully!');
} else {
    $app->send('&cFailed to delete record');
}
```

#### Error Handling

```php
try {
    // Database operation
    $result = Model::performOperation($data);

    if ($result) {
        $app->send('&aOperation successful');
    } else {
        $app->send('&cOperation failed');
    }
} catch (\Exception $e) {
    $app->send('&cError: ' . $e->getMessage());
    \App\App::getInstance(true)->getLogger()->error('Command error: ' . $e->getMessage());
}
```

### 8. Interactive Input

#### Using readline()

For interactive prompts:

```php
// Simple prompt with default
$app->send("&7Please enter the database name &8[&e$defaultDBName&8]&7");
$dbName = readline('> ') ?: $defaultDBName;

// Password prompt (visible input)
$app->send("&7Please enter the password &8[&e$defaultPassword&8]&7");
$password = readline('> ') ?: $defaultPassword;

// Validation loop
do {
    $app->send('&7Please enter a valid email address:');
    $email = readline('> ');
} while (!filter_var($email, FILTER_VALIDATE_EMAIL));
```

#### Confirmation Prompts

```php
// Yes/No confirmation
private static function confirmAction(App $app, string $message): bool
{
    $app->send($message . ' &7(yes/no):');
    $response = strtolower(trim(readline('> ')));
    return in_array($response, ['yes', 'y']);
}

// Usage
if (!self::confirmAction($app, '&eAre you sure you want to delete this user?')) {
    $app->send('&7Operation cancelled');
    return;
}
```

### 9. Helper Methods

#### Finding Records by Multiple Identifiers

```php
/**
 * Find a user by UUID, username, or email.
 *
 * @param string $identifier The identifier to search for
 *
 * @return array|null The user record or null if not found
 */
private static function findUser(string $identifier): ?array
{
    // Try UUID first
    $user = User::getUserByUuid($identifier);
    if ($user) {
        return $user;
    }

    // Try username
    $user = User::getUserByUsername($identifier);
    if ($user) {
        return $user;
    }

    // Try email
    $user = User::getUserByEmail($identifier);
    if ($user) {
        return $user;
    }

    return null;
}
```

#### Displaying Record Details

```php
/**
 * Display detailed information about a record.
 *
 * @param App $app The CLI app instance
 * @param array $record The record to display
 */
private static function displayRecordDetails(App $app, array $record): void
{
    $app->send('&aRecord Details:');
    $app->send('&7' . str_repeat('-', 80));

    foreach ($record as $key => $value) {
        // Skip sensitive fields
        if (in_array($key, ['password', 'remember_token', 'two_fa_key'])) {
            continue;
        }

        // Format key
        $label = str_replace('_', ' ', ucwords($key, '_'));

        // Format value
        $formattedValue = is_bool($value)
            ? ($value ? '&aYes' : '&cNo')
            : ($value ?? '&7N/A');

        $app->send("&e$label: &f$formattedValue");
    }

    $app->send('&7' . str_repeat('-', 80));
}
```

### 10. Command Examples

#### List Command with Pagination

```php
private static function listItems(App $app, array $args): void
{
    $page = (int) ($args[2] ?? 1);
    $limit = (int) ($args[3] ?? 10);

    if ($page < 1) $page = 1;
    if ($limit < 1) $limit = 10;

    $items = Model::searchItems($page, $limit);
    $total = Model::getCount();
    $totalPages = ceil($total / $limit);

    $app->send("&aItems (Page $page of $totalPages, Total: $total):");
    $app->send('&7' . str_repeat('-', 100));
    $app->send(sprintf('&e%-5s %-30s %-40s', 'ID', 'Name', 'Description'));
    $app->send('&7' . str_repeat('-', 100));

    foreach ($items as $item) {
        $app->send(sprintf(
            '%-5s %-30s %-40s',
            $item['id'],
            substr($item['name'], 0, 30),
            substr($item['description'], 0, 40)
        ));
    }

    $app->send('&7' . str_repeat('-', 100));
}
```

#### Show Command with Details

```php
private static function showItem(App $app, ?string $identifier): void
{
    if (!$identifier) {
        $app->send('&cPlease provide an identifier');
        return;
    }

    $item = self::findItem($identifier);
    if (!$item) {
        $app->send('&cItem not found: ' . $identifier);
        return;
    }

    $app->send('&aItem Details:');
    $app->send('&7' . str_repeat('-', 80));
    $app->send('&eID: &f' . $item['id']);
    $app->send('&eName: &f' . $item['name']);
    $app->send('&eDescription: &f' . $item['description']);
    $app->send('&eCreated: &f' . $item['created_at']);
    $app->send('&7' . str_repeat('-', 80));
}
```

#### Create Command with Validation

```php
private static function createItem(App $app, array $args): void
{
    if (count($args) < 5) {
        $app->send('&cUsage: command create <name> <description> <value>');
        return;
    }

    $name = $args[2];
    $description = $args[3];
    $value = $args[4];

    // Validation
    if (strlen($name) < 3) {
        $app->send('&cName must be at least 3 characters');
        return;
    }

    // Check for duplicates
    if (Model::getItemByName($name)) {
        $app->send('&cItem with this name already exists');
        return;
    }

    // Create
    $data = [
        'name' => $name,
        'description' => $description,
        'value' => $value,
        'uuid' => \App\Helpers\UUIDUtils::generateV4(),
    ];

    $itemId = Model::createItem($data);
    if ($itemId) {
        $app->send('&aItem created successfully!');
        $app->send('&eItem ID: &f' . $itemId);
        $app->send('&eUUID: &f' . $data['uuid']);
    } else {
        $app->send('&cFailed to create item');
    }
}
```

#### Update Command

```php
private static function updateItem(App $app, array $args): void
{
    if (count($args) < 5) {
        $app->send('&cUsage: command update <identifier> <field> <value>');
        $app->send('&eAvailable fields: name, description, value, status');
        return;
    }

    $identifier = $args[2];
    $field = $args[3];
    $value = $args[4];

    $item = self::findItem($identifier);
    if (!$item) {
        $app->send('&cItem not found: ' . $identifier);
        return;
    }

    $allowedFields = ['name', 'description', 'value', 'status'];
    if (!in_array($field, $allowedFields)) {
        $app->send('&cInvalid field. Allowed: ' . implode(', ', $allowedFields));
        return;
    }

    $updateData = [$field => $value];

    $updated = Model::updateItem($item['uuid'], $updateData);
    if ($updated) {
        $app->send('&aItem updated successfully!');
        $app->send("&eUpdated field: &f$field");
        $app->send("&eNew value: &f$value");
    } else {
        $app->send('&cFailed to update item');
    }
}
```

#### Delete Command with Confirmation

```php
private static function deleteItem(App $app, ?string $identifier): void
{
    if (!$identifier) {
        $app->send('&cPlease provide an identifier');
        return;
    }

    $item = self::findItem($identifier);
    if (!$item) {
        $app->send('&cItem not found: ' . $identifier);
        return;
    }

    // Check for dependencies
    $dependencies = Model::checkDependencies($item['id']);
    if (!empty($dependencies)) {
        $app->send('&cCannot delete item with active dependencies');
        $app->send('&ePlease remove dependencies first');
        return;
    }

    $app->send('&eDeleting item: ' . $item['name'] . ' (' . $item['uuid'] . ')');

    $deleted = Model::hardDeleteItem($item['id']);
    if ($deleted) {
        $app->send('&aItem deleted successfully!');
    } else {
        $app->send('&cFailed to delete item');
    }
}
```

#### Search Command

```php
private static function searchItems(App $app, string $query): void
{
    if (empty($query)) {
        $app->send('&cPlease provide a search query');
        return;
    }

    $items = Model::searchItems(
        page: 1,
        limit: 50,
        search: $query
    );

    $total = count($items);

    $app->send("&aSearch Results for \"$query\" (Found: $total):");
    $app->send('&7' . str_repeat('-', 100));
    $app->send(sprintf('&e%-5s %-30s %-40s', 'ID', 'Name', 'Description'));
    $app->send('&7' . str_repeat('-', 100));

    foreach ($items as $item) {
        $app->send(sprintf(
            '%-5s %-30s %-40s',
            $item['id'],
            substr($item['name'], 0, 30),
            substr($item['description'], 0, 40)
        ));
    }

    $app->send('&7' . str_repeat('-', 100));
}
```

### 11. Plugin Command Support

#### Plugin Command Structure

Plugins can add their own commands in `backend/storage/addons/{PluginName}/Commands/`:

```php
namespace App\Addons\PluginName\Commands;

use App\Cli\App;
use App\Cli\CommandBuilder;

class CustomCommand extends App implements CommandBuilder
{
    public static function execute(array $args): void
    {
        $app = App::getInstance();
        $app->send('&aExecuting plugin command!');
    }

    public static function getDescription(): string
    {
        return 'Custom plugin command description';
    }

    public static function getSubCommands(): array
    {
        return [];
    }
}
```

### 12. Best Practices

#### Command Design

- Keep commands focused on a single resource or feature
- Use sub-commands for related operations (list, show, create, update, delete)
- Provide clear usage messages when arguments are missing
- Validate all input before processing
- Use consistent color coding (green=success, red=error, yellow=warning)

#### Error Handling

- Always validate arguments before processing
- Check for required dependencies (.env file, database connection)
- Provide helpful error messages with proper formatting
- Log errors for debugging
- Exit gracefully with appropriate exit codes

#### Code Organization

- Put sub-command logic in private static methods
- Use helper methods for repetitive tasks
- Keep execute() method clean and focused on routing
- Group related functionality together
- Document complex logic with comments

#### Output Formatting

- Use consistent table widths across similar commands
- Truncate long values to fit within columns
- Always close table borders
- Include pagination info when applicable
- Use color codes meaningfully (not just for decoration)

### 13. Security Considerations

#### Sensitive Data

- Never display passwords or tokens in output
- Sanitize error messages that might contain sensitive data
- Use `[REDACTED]` for sensitive fields in error logs
- Validate user input to prevent injection attacks

#### Access Control

- Check for .env file existence before database operations
- Verify user has necessary permissions (if applicable)
- Validate ownership before allowing modifications
- Prevent deletion of critical system records

### 14. Common Patterns

#### Boolean Field Handling

```php
// Convert string to boolean
$boolValue = in_array($value, ['true', '1', 'yes'], true);
$updateData['banned'] = $boolValue;

// Display boolean as Yes/No
$displayValue = ($item['banned'] == 1 || $item['banned'] === true)
    ? '&cYes'
    : '&aNo';
```

#### UUID Generation

```php
use App\Helpers\UUIDUtils;

$uuid = UUIDUtils::generateV4();
$data['uuid'] = $uuid;
```

#### Password Hashing

```php
// Hash new password
$data['password'] = password_hash($password, PASSWORD_BCRYPT);

// Update password and regenerate token
$updateData['password'] = password_hash($newPassword, PASSWORD_BCRYPT);
$updateData['remember_token'] = User::generateAccountToken();
```

### 15. Testing Commands

When creating or testing commands:

1. Test with missing arguments
2. Test with invalid input
3. Test with valid input
4. Test error conditions (record not found, etc.)
5. Test pagination edge cases
6. Verify output formatting looks correct
7. Check that color codes render properly

### 16. Documentation

#### Command Description

- Keep descriptions concise and clear
- Describe what the command does, not how to use it
- Use present tense: "Manage users" not "Manages users"

#### Sub-Command Descriptions

- Include usage examples in descriptions
- Show required vs optional arguments with <> and []
- Provide clear parameter names
- Example: `'create' => 'Create a new user (usage: users create <username> <email> [role_id])'`

## Quick Reference Checklist

When creating a new CLI command:

- [ ] Add proper file header with MIT license
- [ ] Use namespace `App\Cli\Commands`
- [ ] Extend `App` class
- [ ] Implement `CommandBuilder` interface
- [ ] Implement required methods: `execute()`, `getDescription()`, `getSubCommands()`
- [ ] Use static methods only
- [ ] Get App instance with `App::getInstance()`
- [ ] Check for .env file if database is needed
- [ ] Validate all input arguments
- [ ] Use Chat models for database operations
- [ ] Use Minecraft color codes for output
- [ ] Format tables with `sprintf()` and borders
- [ ] Handle errors gracefully with colored messages
- [ ] Provide clear usage messages
- [ ] Exit with `exit;` at end of execution
- [ ] Document sub-commands in `getSubCommands()`
- [ ] Test with various inputs and edge cases

## Complete Command Template

```php
<?php

namespace App\Cli\Commands;

use App\Cli\App;
use App\Cli\CommandBuilder;
use App\Chat\YourModel;

class YourCommand extends App implements CommandBuilder
{
    public static function execute(array $args): void
    {
        $app = App::getInstance();

        if (!file_exists(__DIR__ . '/../../../storage/config/.env')) {
            \App\App::getInstance(true)->getLogger()->warning('Executed a command without a .env file');
            $app->send('&cThe .env file does not exist. Please create one before running this command');
            exit;
        }

        if (isset($args[1])) {
            $subCommand = $args[1];
            switch ($subCommand) {
                case 'list':
                    self::listItems($app, $args);
                    break;
                case 'show':
                    self::showItem($app, $args[2] ?? null);
                    break;
                case 'create':
                    self::createItem($app, $args);
                    break;
                case 'update':
                    self::updateItem($app, $args);
                    break;
                case 'delete':
                    self::deleteItem($app, $args[2] ?? null);
                    break;
                default:
                    $app->send('&cInvalid subcommand. Use: list, show, create, update, delete');
                    break;
            }
        } else {
            $app->send('&cPlease specify a subcommand: list, show, create, update, delete');
        }

        exit;
    }

    public static function getDescription(): string
    {
        return 'Manage items (list, show, create, update, delete)';
    }

    public static function getSubCommands(): array
    {
        return [
            'list' => 'List all items (usage: yourcommand list [page] [limit])',
            'show' => 'Show item details (usage: yourcommand show <identifier>)',
            'create' => 'Create a new item (usage: yourcommand create <args>)',
            'update' => 'Update an item (usage: yourcommand update <identifier> <field> <value>)',
            'delete' => 'Delete an item (usage: yourcommand delete <identifier>)',
        ];
    }

    private static function listItems(App $app, array $args): void
    {
        // Implementation
    }

    private static function showItem(App $app, ?string $identifier): void
    {
        // Implementation
    }

    private static function createItem(App $app, array $args): void
    {
        // Implementation
    }

    private static function updateItem(App $app, array $args): void
    {
        // Implementation
    }

    private static function deleteItem(App $app, ?string $identifier): void
    {
        // Implementation
    }
}
```
