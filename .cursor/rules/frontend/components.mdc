---
description: FeatherPanel Frontend - Vue Component Development Standards
globs: frontend/src/components/**/*.vue, frontend/src/pages/**/*.vue
alwaysApply: false
---

# Vue Component Development Standards

## Component Structure

### Standard Component (defineComponent)

```vue
<script lang="ts">
// MIT License header here

import { defineComponent, ref, computed, onMounted } from "vue";
import { useRouter } from "vue-router";

export default defineComponent({
  name: "MyComponent",
  components: {
    // Child components
  },
  props: {
    title: {
      type: String,
      required: true,
    },
    count: {
      type: Number,
      default: 0,
    },
  },
  emits: ["update", "delete"],
  setup(props, { emit }) {
    const router = useRouter();
    const localState = ref<string>("");

    const computedValue = computed(() => {
      return props.title.toUpperCase();
    });

    const handleClick = () => {
      emit("update", localState.value);
    };

    onMounted(() => {
      // Initialization
    });

    return {
      localState,
      computedValue,
      handleClick,
    };
  },
});
</script>

<template>
  <div class="component-wrapper">
    <h1>{{ title }}</h1>
  </div>
</template>

<style scoped>
.component-wrapper {
  /* Styles */
}
</style>
```

### Script Setup (Preferred for Simple Components)

```vue
<script setup lang="ts">
import { ref, computed, onMounted } from "vue";

const props = withDefaults(
  defineProps<{
    title: string;
    count?: number;
  }>(),
  {
    count: 0,
  }
);

const emit = defineEmits<{
  update: [value: string];
  delete: [id: number];
}>();

const localState = ref<string>("");

const computedValue = computed(() => props.title.toUpperCase());

const handleClick = () => {
  emit("update", localState.value);
};

onMounted(() => {
  // Initialization
});
</script>

<template>
  <div>{{ title }}</div>
</template>
```

## Component Naming

- Use PascalCase: `UserProfile.vue`, `ServerList.vue`
- Be descriptive and specific
- Match export name: `UserProfile.vue` â†’ `name: "UserProfile"`
- Avoid generic names: `Component.vue`, `View.vue`

## Props and Emits

### Defining Props (Script Setup)

```typescript
// Simple props
const props = defineProps<{
  title: string;
  count?: number;
  items: Item[];
}>();

// Props with defaults
const props = withDefaults(
  defineProps<{
    title: string;
    variant?: "primary" | "secondary";
    size?: "sm" | "md" | "lg";
  }>(),
  {
    variant: "primary",
    size: "md",
  }
);
```

### Defining Emits (Script Setup)

```typescript
const emit = defineEmits<{
  update: [value: string];
  delete: [id: number];
  submit: [data: FormData];
  cancel: [];
}>();

// Usage
emit("update", "new value");
emit("delete", 123);
emit("submit", formData);
emit("cancel");
```

## Lifecycle Hooks

```typescript
import { onBeforeMount, onMounted, onUpdated, onUnmounted } from "vue";

onBeforeMount(() => {
  // Before mount
});

onMounted(() => {
  // After mount - fetch data, setup listeners
  fetchData();
});

onUpdated(() => {
  // After updates
});

onUnmounted(() => {
  // Cleanup - remove listeners, clear intervals
  cleanup();
});
```

## Template Best Practices

### Conditional Rendering

```vue
<template>
  <!-- Loading state -->
  <div v-if="loading" class="loading-spinner">Loading...</div>

  <!-- Error state -->
  <div v-else-if="error" class="error-message">{{ error }}</div>

  <!-- Content -->
  <div v-else class="content">
    <!-- Render content -->
  </div>
</template>
```

### Lists and Keys

```vue
<template>
  <div v-for="item in items" :key="item.id" class="item">
    {{ item.name }}
  </div>
</template>
```

Always use unique keys - prefer `id` or `uuid` over index.

### Event Handlers

```vue
<template>
  <!-- Click handlers -->
  <button @click="handleClick">Click</button>
  <button @click="() => handleWithParam(123)">Click with param</button>

  <!-- Form submit -->
  <form @submit.prevent="handleSubmit">
    <input @input="handleInput" />
  </form>

  <!-- Custom events -->
  <MyComponent @update="handleUpdate" @delete="handleDelete" />
</template>
```

## Scoped Styles

```vue
<style scoped>
/* Scoped to this component only */
.component-wrapper {
  padding: 1rem;
}

/* Deep selector for child components */
:deep(.child-class) {
  color: red;
}

/* Slotted content */
:slotted(.slot-class) {
  margin: 0;
}

/* Global styles (use sparingly) */
:global(.global-class) {
  font-size: 16px;
}
</style>
```

## Slots

### Defining Slots

```vue
<template>
  <div class="wrapper">
    <!-- Default slot -->
    <slot />

    <!-- Named slots -->
    <header>
      <slot name="header" />
    </header>

    <main>
      <slot name="content">
        <!-- Fallback content -->
        <p>No content provided</p>
      </slot>
    </main>

    <!-- Scoped slots -->
    <div v-for="item in items" :key="item.id">
      <slot name="item" :item="item" :index="item.id">
        {{ item.name }}
      </slot>
    </div>
  </div>
</template>
```

### Using Slots

```vue
<template>
  <MyComponent>
    <!-- Default slot -->
    <p>Default content</p>

    <!-- Named slots -->
    <template #header>
      <h1>Header</h1>
    </template>

    <template #content>
      <p>Main content</p>
    </template>

    <!-- Scoped slots -->
    <template #item="{ item, index }">
      <div>{{ index }}: {{ item.name }}</div>
    </template>
  </MyComponent>
</template>
```

## Component Checklist

When creating a new component:

- [ ] Add MIT license header
- [ ] Use TypeScript (`<script lang="ts">`)
- [ ] Use Composition API (setup or script setup)
- [ ] Add explicit type annotations
- [ ] Use @ alias for imports
- [ ] Define props with types
- [ ] Define emits with types
- [ ] Support dark mode in styles
- [ ] Use i18n for user-facing text
- [ ] Handle loading and error states
- [ ] Add proper component name
- [ ] Test in both light and dark modes
