---
description: FeatherPanel Frontend - Composable Functions and Reusable Logic
globs: frontend/src/composables/**/*.ts
alwaysApply: false
---

# Composable Functions

## Creating Composables

Composables are reusable composition functions (always use `use` prefix):

```typescript
import { ref, readonly, onMounted, onUnmounted } from "vue";

export function useMyFeature() {
  const state = ref<string>("");
  const isLoading = ref<boolean>(false);
  const error = ref<string | null>(null);

  const doSomething = async (): Promise<void> => {
    isLoading.value = true;
    error.value = null;

    try {
      // Logic here
      await performAction();
    } catch (err) {
      error.value = "Operation failed";
      console.error("Error:", err);
    } finally {
      isLoading.value = false;
    }
  };

  onMounted(() => {
    // Initialize
  });

  onUnmounted(() => {
    // Cleanup
  });

  // Return readonly refs and functions
  return {
    state: readonly(state),
    isLoading: readonly(isLoading),
    error: readonly(error),
    doSomething,
  };
}
```

## Available Composables

### useTheme()

```typescript
import { useTheme } from "@/composables/useTheme";

const { isDark, toggleTheme, setTheme } = useTheme();

// Toggle theme
toggleTheme();

// Set specific theme
setTheme(true); // dark
setTheme(false); // light
```

### useLanguage()

```typescript
import { useLanguage } from "@/composables/useLanguage";

const { currentLocale, changeLanguage, availableLocales } = useLanguage();

// Change language
await changeLanguage("EN");
```

### useSidebarState()

```typescript
import { useSidebarState } from "@/composables/useSidebarState";

const { isCollapsed, toggle, collapse, expand } = useSidebarState();

// Toggle sidebar
toggle();
```

### useBackground()

```typescript
import { useBackground } from "@/composables/useBackground";

const { setBackground, setOpacity, setBlur, removeBackground } =
  useBackground();

// Set custom background
setBackground("https://example.com/image.jpg");
setOpacity(50);
setBlur(10);
```

## Composable Best Practices

- Use `use` prefix in name
- Return readonly refs when state shouldn't be mutated externally
- Handle cleanup in `onUnmounted`
- Add proper TypeScript types
- Make focused and reusable
- Document complex logic
