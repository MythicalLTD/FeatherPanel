---
description: FeatherPanel Frontend - Form Handling and Validation Patterns
globs: frontend/src/pages/**/*.vue, frontend/src/components/**/*.vue
alwaysApply: false
---

# Form Handling and Validation

## Form State

```typescript
import { reactive, ref } from "vue";

const form = reactive({
  username: "",
  email: "",
  password: "",
  role_id: 1,
});

const errors = reactive({
  username: "",
  email: "",
  password: "",
});

const isSubmitting = ref<boolean>(false);
```

## Validation Pattern

```typescript
const validateForm = (): boolean => {
  let isValid = true;

  // Reset errors
  errors.username = "";
  errors.email = "";
  errors.password = "";

  // Validate username
  if (!form.username || form.username.trim().length < 3) {
    errors.username = "Username must be at least 3 characters";
    isValid = false;
  }

  if (form.username.length > 32) {
    errors.username = "Username must be less than 32 characters";
    isValid = false;
  }

  // Validate email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!form.email || !emailRegex.test(form.email)) {
    errors.email = "Invalid email address";
    isValid = false;
  }

  // Validate password
  if (!form.password || form.password.length < 8) {
    errors.password = "Password must be at least 8 characters";
    isValid = false;
  }

  return isValid;
};
```

## Form Submission

```typescript
const handleSubmit = async (): Promise<void> => {
  if (!validateForm()) {
    return;
  }

  isSubmitting.value = true;

  try {
    const response = await axios.put("/api/admin/users", form);

    if (response.data && response.data.success) {
      toast.success("User created successfully!");
      router.push({ name: "AdminUsers" });
    }
  } catch (error) {
    const errorMessage = getErrorMessage(error);
    toast.error(errorMessage);
  } finally {
    isSubmitting.value = false;
  }
};
```

## Error Handling

```typescript
function getErrorMessage(err: unknown): string {
  if (typeof err === "object" && err !== null) {
    const e = err as {
      response?: { data?: { message?: string; error_code?: string } };
      message?: string;
    };

    // Handle API error codes
    const code = e.response?.data?.error_code;
    if (code) {
      switch (code) {
        case "MISSING_REQUIRED_FIELDS":
          return "Please fill all required fields";
        case "INVALID_EMAIL_ADDRESS":
          return "Invalid email address";
        case "EMAIL_ALREADY_EXISTS":
          return "Email already exists";
        case "USERNAME_ALREADY_EXISTS":
          return "Username already exists";
        default:
          break;
      }
    }

    return e.response?.data?.message || e.message || "Unknown error";
  }

  return "Unknown error occurred";
}
```

## Complete Form Example

```vue
<template>
  <form @submit.prevent="handleSubmit" class="space-y-4">
    <div class="grid gap-3">
      <Label for="username">Username</Label>
      <Input id="username" v-model="form.username" required />
      <p v-if="errors.username" class="text-sm text-red-500">{{ errors.username }}</p>
    </div>

    <div class="grid gap-3">
      <Label for="email">Email</Label>
      <Input id="email" v-model="form.email" type="email" required />
      <p v-if="errors.email" class="text-sm text-red-500">{{ errors.email }}</p>
    </div>

    <div class="grid gap-3">
      <Label for="password">Password</Label>
      <Input id="password" v-model="form.password" type="password" required />
      <p v-if="errors.password" class="text-sm text-red-500">{{ errors.password }}</p>
    </div>

    <div class="flex gap-2">
      <Button type="submit" :disabled="isSubmitting">
        <span v-if="isSubmitting">Creating...</span>
        <span v-else">Create User</span>
      </Button>
      <Button type="button" variant="outline" @click="handleCancel">Cancel</Button>
    </div>
  </form>
</template>

<script setup lang="ts">
import { reactive, ref } from "vue";
import { useRouter } from "vue-router";
import { useToast } from "vue-toastification";
import axios from "axios";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const router = useRouter();
const toast = useToast();

const form = reactive({
  username: "",
  email: "",
  password: "",
});

const errors = reactive({
  username: "",
  email: "",
  password: "",
});

const isSubmitting = ref(false);

// Validation and submit functions here...
</script>
```

## Validation Rules

Common validation patterns:

```typescript
// Required field
if (!value || value.trim() === "") {
  return "This field is required";
}

// Minimum length
if (value.length < min) {
  return `Must be at least ${min} characters`;
}

// Maximum length
if (value.length > max) {
  return `Must be less than ${max} characters`;
}

// Email validation
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
if (!emailRegex.test(email)) {
  return "Invalid email address";
}

// UUID validation
const uuidRegex = /^[a-f0-9-]{36}$/i;
if (!uuidRegex.test(uuid)) {
  return "Invalid UUID format";
}

// URL validation
try {
  new URL(url);
} catch {
  return "Invalid URL";
}
```
