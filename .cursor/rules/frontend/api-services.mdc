---
description: FeatherPanel Frontend - API Communication and Service Patterns
globs: frontend/src/services/**/*.ts, frontend/src/pages/**/*.vue, frontend/src/stores/**/*.ts
alwaysApply: false
---

# API Communication Patterns

## Using Axios

```typescript
import axios from "axios";

// GET request
const fetchData = async (): Promise<void> => {
  try {
    const response = await axios.get("/api/admin/users");
    if (response.data && response.data.success) {
      users.value = response.data.data;
    }
  } catch (error) {
    console.error("Error fetching data:", error);
  }
};

// GET with query parameters
const fetchUsers = async (
  page: number,
  limit: number,
  search: string
): Promise<void> => {
  try {
    const response = await axios.get("/api/admin/users", {
      params: { page, limit, search },
    });
    users.value = response.data.data.users;
  } catch (error) {
    console.error("Error:", error);
  }
};

// PUT (Create)
const createUser = async (data: UserCreate): Promise<void> => {
  try {
    const response = await axios.put("/api/admin/users", data);
    if (response.data && response.data.success) {
      toast.success("User created successfully!");
    }
  } catch (error) {
    toast.error("Failed to create user");
  }
};

// PATCH (Update)
const updateUser = async (uuid: string, data: Partial<User>): Promise<void> => {
  try {
    await axios.patch(`/api/admin/users/${uuid}`, data);
    toast.success("User updated successfully!");
  } catch (error) {
    toast.error("Failed to update user");
  }
};

// DELETE
const deleteUser = async (uuid: string): Promise<void> => {
  try {
    await axios.delete(`/api/admin/users/${uuid}`);
    toast.success("User deleted successfully!");
  } catch (error) {
    toast.error("Failed to delete user");
  }
};
```

## API Response Types

```typescript
export interface ApiResponse<T = unknown> {
  success: boolean;
  message?: string;
  data?: T;
  error?: boolean;
  error_message?: string;
  error_code?: string;
}

export interface PaginationInfo {
  current_page: number;
  per_page: number;
  total_records: number;
  total_pages: number;
  has_next: boolean;
  has_prev: boolean;
  from: number;
  to: number;
}

export interface ListResponse<T> {
  items: T[];
  pagination: PaginationInfo;
  search?: {
    query: string;
    has_results: boolean;
  };
}
```

## Error Handling Pattern

```typescript
const fetchData = async (): Promise<void> => {
  isLoading.value = true;
  error.value = null;

  try {
    const response = await axios.get("/api/data");

    if (response.data && response.data.success) {
      data.value = response.data.data;
    } else {
      throw new Error(response.data.message || "Unknown error");
    }
  } catch (err) {
    console.error("Error fetching data:", err);
    error.value = "Failed to load data";
    toast.error("Failed to load data");
  } finally {
    isLoading.value = false;
  }
};
```

## Toast Notifications

```typescript
import { useToast } from "vue-toastification";

const toast = useToast();

// Success
toast.success("Operation completed successfully!");

// Error
toast.error("Failed to complete operation");

// Warning
toast.warning("Please check your input");

// Info
toast.info("Data has been saved");
```

## Complete CRUD Pattern

```typescript
import { ref } from "vue";
import axios from "axios";
import { useToast } from "vue-toastification";

const toast = useToast();
const items = ref<Item[]>([]);
const isLoading = ref(false);

// Create
const createItem = async (data: ItemCreate): Promise<boolean> => {
  try {
    const response = await axios.put("/api/admin/items", data);
    if (response.data && response.data.success) {
      toast.success("Item created successfully!");
      await fetchItems();
      return true;
    }
    return false;
  } catch (error) {
    console.error("Error creating item:", error);
    toast.error("Failed to create item");
    return false;
  }
};

// Read (list)
const fetchItems = async (): Promise<void> => {
  isLoading.value = true;
  try {
    const response = await axios.get("/api/admin/items");
    if (response.data && response.data.success) {
      items.value = response.data.data;
    }
  } catch (error) {
    console.error("Error fetching items:", error);
    toast.error("Failed to load items");
  } finally {
    isLoading.value = false;
  }
};

// Read (single)
const fetchItem = async (uuid: string): Promise<Item | null> => {
  try {
    const response = await axios.get(`/api/admin/items/${uuid}`);
    if (response.data && response.data.success) {
      return response.data.data;
    }
    return null;
  } catch (error) {
    console.error("Error fetching item:", error);
    return null;
  }
};

// Update
const updateItem = async (
  uuid: string,
  data: Partial<Item>
): Promise<boolean> => {
  try {
    await axios.patch(`/api/admin/items/${uuid}`, data);
    toast.success("Item updated successfully!");
    await fetchItems();
    return true;
  } catch (error) {
    console.error("Error updating item:", error);
    toast.error("Failed to update item");
    return false;
  }
};

// Delete
const deleteItem = async (uuid: string): Promise<boolean> => {
  try {
    await axios.delete(`/api/admin/items/${uuid}`);
    toast.success("Item deleted successfully!");
    await fetchItems();
    return true;
  } catch (error) {
    console.error("Error deleting item:", error);
    toast.error("Failed to delete item");
    return false;
  }
};
```
