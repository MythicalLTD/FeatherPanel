---
description: FeatherPanel Frontend - Project Overview, Architecture & Core Technologies
globs: frontend/**/*.vue, frontend/**/*.ts
alwaysApply: false
---

# FeatherPanel Frontend - Overview

## Project Context

FeatherPanel Frontend is a modern Vue 3 SPA built with TypeScript, using Composition API, Pinia for state management, Vue Router, TailwindCSS v4, and shadcn-vue components.

## Core Technologies Stack

- **Framework:** Vue 3.5+ (Composition API)
- **Language:** TypeScript 5.9+
- **Build Tool:** Vite 7.1+
- **Package Manager:** pnpm
- **State Management:** Pinia 3.0+
- **Router:** Vue Router 4.5+
- **Styling:** TailwindCSS v4.1+
- **UI Components:** shadcn-vue (Radix Vue/reka-ui)
- **Icons:** Lucide Vue Next
- **Internationalization:** Vue I18n
- **HTTP Client:** Axios
- **Notifications:** Vue Toastification
- **Form Validation:** VeeValidate
- **Terminal:** Vue Web Terminal
- **Code Editor:** Ace Editor (vue3-ace-editor)

## Project Structure

```
frontend/
├── public/              # Static files
├── src/
│   ├── assets/         # CSS, images, fonts
│   ├── components/     # Vue components
│   │   ├── admin/     # Admin-specific components
│   │   ├── server/    # Server management components
│   │   ├── ui/        # shadcn-vue UI components
│   │   └── ...
│   ├── composables/    # Composition functions
│   ├── kit/           # Custom component library (TableComponent)
│   ├── layouts/       # Layout components
│   ├── lib/           # Utility functions
│   ├── locale/        # i18n translation files (YAML)
│   ├── pages/         # Page components (route views)
│   ├── router/        # Vue Router configuration
│   ├── services/      # API services, external integrations
│   ├── stores/        # Pinia stores
│   ├── types/         # TypeScript type definitions
│   ├── App.vue        # Root component
│   └── main.ts        # Application entry point
├── package.json
├── vite.config.ts
└── tsconfig.json
```

## License Header

**EVERY** TypeScript and Vue file MUST include this MIT license header:

```typescript
/*
MIT License

Copyright (c) 2025 MythicalSystems
Copyright (c) 2025 Cassian Gherman (NaysKutzu)
Copyright (c) 2018 - 2021 Dane Everitt <dane@daneeveritt.com> and Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
```

For Vue components, use comment style:

```vue
<script lang="ts">
// MIT License
//
// Copyright (c) 2025 MythicalSystems
// Copyright (c) 2025 Cassian Gherman (NaysKutzu)
// [rest of license...]
</script>
```

## Path Aliases

Always use `@/` for imports from `src/`:

```typescript
// ✅ CORRECT
import { useSessionStore } from "@/stores/session";
import MyComponent from "@/components/MyComponent.vue";
import { cn } from "@/lib/utils";

// ❌ WRONG - Relative paths
import { useSessionStore } from "../../stores/session";
import MyComponent from "../components/MyComponent.vue";
```

## Terminology Standards

**ALWAYS use the correct FeatherPanel terminology:**

- ✅ `realms` (NOT "nests")
- ✅ `spells` (NOT "eggs")
- Use in: routes, components, variables, translations, API calls

**Examples:**

```typescript
// ✅ GOOD
const realms = ref<Realm[]>([]);
await axios.get("/api/admin/realms");
{ path: "/admin/realms", name: "AdminRealms" }

// ❌ BAD
const nests = ref<Nest[]>([]);
await axios.get("/api/admin/nests");
```

## Development Commands

```bash
# Development server
pnpm dev

# Type checking
pnpm type-check

# Linting and formatting
pnpm lint
pnpm format

# Build for production
pnpm build

# Preview production build
pnpm preview
```

## API Communication

Backend API base URL: `http://localhost:8721` (proxied via Vite in development)

All API endpoints use:

- `/api/admin/*` - Admin panel endpoints
- `/api/user/*` - User panel endpoints
- `/api/wings/*` - Wings daemon endpoints
- `/api/system/*` - System/public endpoints

## Key Features

1. **Auto-discovery:** Routes are automatically loaded from `router/routes/**/*.ts`
2. **Plugin System:** Frontend can load plugin CSS/JS via `pluginLoader` service
3. **Dark Mode:** Full dark mode support with theme persistence
4. **Responsive:** Mobile-first design with responsive layouts
5. **i18n:** Multi-language support with lazy-loaded translations
6. **Performance:** Lazy loading, code splitting, optimized builds
7. **Accessibility:** WCAG compliant with keyboard navigation
