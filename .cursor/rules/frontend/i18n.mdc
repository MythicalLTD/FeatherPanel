---
description: FeatherPanel Frontend - Internationalization (i18n) Patterns
globs: frontend/src/**/*.vue, frontend/src/**/*.ts, frontend/src/locale/**/*.yml
alwaysApply: false
---

# Internationalization (i18n)

## Using Translations in Components

```vue
<script setup lang="ts">
import { useI18n } from "vue-i18n";

const { t } = useI18n();
</script>

<template>
  <div>
    <!-- Simple translation -->
    <h1>{{ t("pages.admin.users.title") }}</h1>

    <!-- Translation with parameters -->
    <p>{{ t("common.welcome", { name: username }) }}</p>

    <!-- Pluralization -->
    <p>{{ t("common.itemCount", { count: items.length }, items.length) }}</p>

    <!-- In attributes -->
    <button :title="t('common.save')">{{ t("actions.save") }}</button>
  </div>
</template>
```

## Translation File Structure

Located in `src/locale/*.yml`:

```yaml
pages:
  admin:
    users:
      title: "User Management"
      create: "Create User"
      edit: "Edit User"
      list: "User List"

common:
  welcome: "Welcome, {name}!"
  save: "Save"
  cancel: "Cancel"
  delete: "Delete"
  loading: "Loading..."
  error: "An error occurred"

actions:
  create: "Create"
  update: "Update"
  delete: "Delete"
  view: "View"
  edit: "Edit"

table:
  records: "records"
  page: "Page"
  of: "of"
  columnsSelected: "{count} columns selected"

api_errors:
  MISSING_REQUIRED_FIELDS: "Please fill all required fields"
  INVALID_EMAIL_ADDRESS: "Invalid email address"
  EMAIL_ALREADY_EXISTS: "Email already exists"
  UNKNOWN_ERROR: "An unknown error occurred"
```

## Changing Language

```typescript
import { useLanguage } from "@/composables/useLanguage";

const { currentLocale, changeLanguage } = useLanguage();

// Change language
await changeLanguage("EN");
await changeLanguage("FR");
```

## Lazy Loading Translations

Translations are lazy-loaded automatically in `main.ts`:

```typescript
const loadLocaleMessages = async (locale: string) => {
  const messages = await import(`@/locale/${locale.toLowerCase()}.yml`);
  i18n.global.setLocaleMessage(locale, messages.default);
};
```

## Best Practices

- Always use translation keys, never hardcoded strings
- Organize translations by domain/feature
- Use descriptive key names
- Provide fallback values
- Test all supported languages
